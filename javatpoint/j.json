[
{"Title": "Operators in java", "subtitle": "Java Operator Precedence", "Code": ["\nclass OperatorExample{\npublic static void main(String args[]){\nint x=10;\nSystem.out.println(x++);//10 (11)\nSystem.out.println(++x);//12\nSystem.out.println(x--);//12 (11)\nSystem.out.println(--x);//10\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=10;\nint b=10;\nSystem.out.println(a++ + ++a);//10+12=22\nSystem.out.println(b++ + b++);//10+11=21\n\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=10;\nint b=-10;\nboolean c=true;\nboolean d=false;\nSystem.out.println(~a);//-11 (minus of total positive value which starts from 0)\nSystem.out.println(~b);//9 (positive of total minus, positive starts from 0)\nSystem.out.println(!c);//false (opposite of boolean value)\nSystem.out.println(!d);//true\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=10;\nint b=5;\nSystem.out.println(a+b);//15\nSystem.out.println(a-b);//5\nSystem.out.println(a*b);//50\nSystem.out.println(a/b);//2\nSystem.out.println(a%b);//0\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nSystem.out.println(10*10/5+3-1*4/2);\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nSystem.out.println(10<<2);//10*2^2=10*4=40\nSystem.out.println(10<<3);//10*2^3=10*8=80\nSystem.out.println(20<<2);//20*2^2=20*4=80\nSystem.out.println(15<<4);//15*2^4=15*16=240\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nSystem.out.println(10>>2);//10/2^2=10/4=2\nSystem.out.println(20>>2);//20/2^2=20/4=5\nSystem.out.println(20>>3);//20/2^3=20/8=2\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\n\t//For positive number, >> and >>> works same\n\tSystem.out.println(20>>2);\n\tSystem.out.println(20>>>2);\n\t//For negative number, >>> changes parity bit (MSB) to 0\n\tSystem.out.println(-20>>2);\n\tSystem.out.println(-20>>>2);\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=10;\nint b=5;\nint c=20;\nSystem.out.println(a", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=10;\nint b=5;\nint c=20;\nSystem.out.println(a", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=10;\nint b=5;\nint c=20;\nSystem.out.println(a>b||a", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=2;\nint b=5;\nint min=(a", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=10;\nint b=5;\nint min=(a", "\nclass OperatorExample{\npublic static void main(String args[]){\nint a=10;\nint b=20;\na+=4;//a=a+4 (a=10+4)\nb-=4;//b=b-4 (b=20-4)\nSystem.out.println(a);\nSystem.out.println(b);\n}}\n", "\nclass OperatorExample{\npublic static void main(String[] args){\nint a=10;\na+=3;//10+3\nSystem.out.println(a);\na-=4;//13-4\nSystem.out.println(a);\na*=2;//9*2\nSystem.out.println(a);\na/=2;//18/2\nSystem.out.println(a);\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nshort a=10;\nshort b=10;\n//a+=b;//a=a+b internally so fine\na=a+b;//Compile time error because 10+10=20 now int\nSystem.out.println(a);\n}}\n", "\nclass OperatorExample{\npublic static void main(String args[]){\nshort a=10;\nshort b=10;\na=(short)(a+b);//20 which is int now converted to short\nSystem.out.println(a);\n}}\n"], "Language": "Java", "Description": ["The Java unary operators require only one operand. Unary operators are used to perform various operations i.e.:", "Output:", "Output:", "Output:", "Java arithmatic operators are used to perform addition, subtraction, multiplication, and division. They act as basic mathematical operations.", "Output:", "Output:", "The Java left shift operator << is used to shift all of the bits in a value to the left side of a specified number of times.", "Output:", "The Java right shift operator >> is used to move left operands value to right by the number of bits specified by the right operand.", "Output:", "Output:", "The logical && operator doesn't check second condition if first condition is false. It checks second condition only if first one is true.", "The bitwise & operator always checks both conditions whether first condition is true or false.", "Output:", "Output:", "The logical || operator doesn't check second condition if first condition is true. It checks second condition only if first one is false.", "The bitwise | operator always checks both conditions whether first condition is true or false.", "Output:", "Java Ternary operator is used as one liner replacement for if-then-else statement and used a lot in java programming.  it is the only conditional operator which takes three operands.", "Output:", "Another Example:", "Output:", "Java assignment operator is one of the most common operator. It is used to \nassign the value on its right to the operand on its left.", "Output:", "Output:", "Output:", "After type cast:", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/operators-in-java"},
{"Title": "Java If-else Statement", "subtitle": "Java if Statement", "Code": ["\nif(condition){\n//code to be executed\n}\n", "\npublic class IfExample {\npublic static void main(String[] args) {\n\tint age=20;\n\tif(age>18){\n\t\tSystem.out.print(\"Age is greater than 18\");\n\t}\n}\n}\n"], "Language": "Java", "Description": ["The Java if statement tests the condition. It executes the ", " if condition is true.", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-if-else"},
{"Title": "Java If-else Statement", "subtitle": "Java if-else Statement", "Code": ["\nif(condition){\n//code if condition is true\n}else{\n//code if condition is false\n}\n", "\npublic class IfElseExample {\npublic static void main(String[] args) {\n\tint number=13;\n\tif(number%2==0){\n\t\tSystem.out.println(\"even number\");\n\t}else{\n\t\tSystem.out.println(\"odd number\");\n\t}\n}\n}\n"], "Language": "Java", "Description": ["The Java if-else statement also tests the condition. It executes the ", " if condition is true otherwise ", " is executed.", "Output:"], "URL": "https://www.javatpoint.com/java-if-else"},
{"Title": "Java If-else Statement", "subtitle": "Java if-else-if ladder Statement", "Code": ["\nif(condition1){\n//code to be executed if condition1 is true\n}else if(condition2){\n//code to be executed if condition2 is true\n}\nelse if(condition3){\n//code to be executed if condition3 is true\n}\n...\nelse{\n//code to be executed if all the conditions are false\n}\n", "\n\npublic class IfElseIfExample {\npublic static void main(String[] args) {\n\tint marks=65;\n\t\n\tif(marks<50){\n\t\tSystem.out.println(\"fail\");\n\t}\n\telse if(marks>=50 && marks<60){\n\t\tSystem.out.println(\"D grade\");\n\t}\n\telse if(marks>=60 && marks<70){\n\t\tSystem.out.println(\"C grade\");\n\t}\n\telse if(marks>=70 && marks<80){\n\t\tSystem.out.println(\"B grade\");\n\t}\n\telse if(marks>=80 && marks<90){\n\t\tSystem.out.println(\"A grade\");\n\t}else if(marks>=90 && marks<100){\n\t\tSystem.out.println(\"A+ grade\");\n\t}else{\n\t\tSystem.out.println(\"Invalid!\");\n\t}\n}\n}\n"], "Language": "Java", "Description": ["The if-else-if ladder statement executes one condition from multiple statements.", "Output:"], "URL": "https://www.javatpoint.com/java-if-else"},
{"Title": "Java Switch Statement", "subtitle": "Java Switch Statement is fall-through", "Code": ["\n//Java Switch Example where we are omitting the\n//break statement\npublic class SwitchExample2 {\npublic static void main(String[] args) {\n\tint number=20;\n\t//switch expression with int value\n\tswitch(number){\n\t//switch cases without break statements\n\tcase 10: System.out.println(\"10\");\n\tcase 20: System.out.println(\"20\");\n\tcase 30: System.out.println(\"30\");\n\tdefault:System.out.println(\"Not in 10, 20 or 30\");\n\t}\n}\n}\n"], "Language": "Java", "Description": ["The Java switch statement is fall-through. It means it executes all statements after the first match if a break statement is not present.", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-switch"},
{"Title": "Java Switch Statement", "subtitle": "Java Switch Statement with String", "Code": ["\n//Java Program to demonstrate the use of Java Switch\n//statement with String\npublic class SwitchStringExample {  \npublic static void main(String[] args) {  \n    //Declaring String variable\n    String levelString=\"Expert\";\n    int level=0;\n    //Using String in Switch expression\n    switch(levelString){  \n    //Using String Literal in Switch case\n    case \"Beginner\": level=1;\n    break;  \n    case \"Intermediate\": level=2;\n    break;  \n    case \"Expert\": level=3;\n    break;  \n    default: level=0;\n    break;\n    }  \n    System.out.println(\"Your Level is: \"+level);\n}  \n} \n\n"], "Language": "Java", "Description": ["Java allows us to use strings in switch expression since Java SE 7. The case statement should be string literal.", "Output:"], "URL": "https://www.javatpoint.com/java-switch"},
{"Title": "Java Switch Statement", "subtitle": "Java Nested Switch Statement", "Code": ["\n//Java Program to demonstrate the use of Java Nested Switch\npublic class NestedSwitchExample {  \n\tpublic static void main(String args[])\n      {\n\t  //C - CSE, E - ECE, M - Mechanical\n        char branch = 'C';               \n        int collegeYear = 4;\n        switch( collegeYear )\n        {\n            case 1:\n                System.out.println(\"English, Maths, Science\");\n                break;\n            case 2:\n                switch( branch ) \n                {\n                    case 'C':\n                        System.out.println(\"Operating System, Java, Data Structure\");\n                        break;\n                    case 'E':\n                        System.out.println(\"Micro processors, Logic switching theory\");\n                        break;\n                    case 'M':\n                        System.out.println(\"Drawing, Manufacturing Machines\");\n                        break;\n                }\n                break;\n            case 3:\n                switch( branch ) \n                {\n                    case 'C':\n                        System.out.println(\"Computer Organization, MultiMedia\");\n                        break;\n                    case 'E':\n                        System.out.println(\"Fundamentals of Logic Design, Microelectronics\");\n                        break;\n                    case 'M':\n                        System.out.println(\"Internal Combustion Engines, Mechanical Vibration\");\n                        break;\n                }\n                break;\n            case 4:\n                switch( branch ) \n                {\n                    case 'C':\n                        System.out.println(\"Data Communication and Networks, MultiMedia\");\n                        break;\n                    case 'E':\n                        System.out.println(\"Embedded System, Image Processing\");\n                        break;\n                    case 'M':\n                        System.out.println(\"Production Technology, Thermal Engineering\");\n                        break;\n                }\n                break;\n        }\n    }\n}\n"], "Language": "Java", "Description": ["We can use switch statement inside other switch statement in Java. It is known as nested switch statement.", "Output:"], "URL": "https://www.javatpoint.com/java-switch"},
{"Title": "Java Switch Statement", "subtitle": "Java Enum in Switch Statement", "Code": ["\n//Java Program to demonstrate the use of Enum\n//in switch statement\npublic class JavaSwitchEnumExample {    \n       public enum Day {  Sun, Mon, Tue, Wed, Thu, Fri, Sat  }  \n       public static void main(String args[])  \n       {  \n         Day[] DayNow = Day.values();  \n           for (Day Now : DayNow)  \n           {  \n                switch (Now)  \n                {  \n                    case Sun:  \n                        System.out.println(\"Sunday\");  \n                        break;  \n                    case Mon:  \n                        System.out.println(\"Monday\");  \n                        break;  \n                    case Tue:  \n                        System.out.println(\"Tuesday\");  \n                        break;       \n                    case Wed:  \n                        System.out.println(\"Wednesday\");  \n                        break;  \n                    case Thu:  \n                        System.out.println(\"Thursday\");  \n                        break;  \n                    case Fri:  \n                        System.out.println(\"Friday\");  \n                        break;  \n                    case Sat:  \n                        System.out.println(\"Saturday\");  \n                        break;  \n                }  \n            }  \n        }  \n}  \n"], "Language": "Java", "Description": ["Java allows us to use enum in switch statement.", "Output:"], "URL": "https://www.javatpoint.com/java-switch"},
{"Title": "Java Switch Statement", "subtitle": "Java Wrapper in Switch Statement", "Code": ["\n//Java Program to demonstrate the use of Wrapper class\n//in switch statement\npublic class WrapperInSwitchCaseExample {     \n\t   public static void main(String args[])\n\t   {\t   \n\t\t    Integer age = 18;\t   \n\t\t    switch (age)\n\t\t    {\n\t\t    \tcase (16):\t    \t\n\t\t    \t\tSystem.out.println(\"You are under 18.\");\n\t\t    \t\tbreak;\n\t\t    \tcase (18):\t\t    \t\n\t\t    \t\tSystem.out.println(\"You are eligible for vote.\");\n\t\t    \t\tbreak;\n\t\t    \tcase (65):\t\t    \t\n\t\t    \t\tSystem.out.println(\"You are senior citizen.\");\n\t\t    \t\tbreak;\n\t\t    \tdefault:\n\t\t    \t\tSystem.out.println(\"Please give the valid age.\");\n\t\t    \t\tbreak;\n\t\t    }\t\t    \n\t    }\n}\n"], "Language": "Java", "Description": ["Java allows us to use four wrapper classes: Byte, Short, Integer and Long in switch statement.", "Output:"], "URL": "https://www.javatpoint.com/java-switch"},
{"Title": "Loops in Java", "subtitle": "Java Simple For Loop", "Code": ["\nfor(initialization;condition;incr/decr){\n//statement or code to be executed\n}\n", "\n//Java Program to demonstrate the example of for loop\n//which prints table of 1\npublic class ForExample {\npublic static void main(String[] args) {\n    //Code of Java for loop\n\tfor(int i=1;i<=10;i++){\n\t\tSystem.out.println(i);\n\t}\n}\n}\n"], "Language": "Java", "Description": ["A simple for loop is the same as C/C++. We can initialize the variable, check condition and increment/decrement value. It consists of four parts:", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-for-loop"},
{"Title": "Loops in Java", "subtitle": "Java for-each Loop", "Code": ["\nfor(Type var:array){\n//code to be executed\n}\n", "\n//Java For-each loop example which prints the\n//elements of the array\npublic class ForEachExample {\npublic static void main(String[] args) {\n    //Declaring an array\n\tint arr[]={12,23,44,56,78};\n\t//Printing array using for-each loop\n\tfor(int i:arr){\n\t\tSystem.out.println(i);\n\t}\n}\n}\n"], "Language": "Java", "Description": ["The for-each loop is used to traverse array or collection in java. It is easier to use than simple for loop because we don't need to increment value and use subscript notation.", "It works on elements basis not index. It returns element one by one in the defined variable.", "Output:"], "URL": "https://www.javatpoint.com/java-for-loop"},
{"Title": "Loops in Java", "subtitle": "Java Labeled For Loop", "Code": ["\nlabelname:\nfor(initialization;condition;incr/decr){\n//code to be executed\n}\n", "\n//A Java program to demonstrate the use of labeled for loop\npublic class LabeledForExample {\npublic static void main(String[] args) {\n    //Using Label for outer and for loop\n\taa:\n\t\tfor(int i=1;i<=3;i++){\n\t\t\tbb:\n\t\t\t\tfor(int j=1;j<=3;j++){\n\t\t\t\t\tif(i==2&&j==2){\n\t\t\t\t\t\tbreak aa;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(i+\" \"+j);\n\t\t\t\t}\n\t\t}\n}\n}\n", "\npublic class LabeledForExample2 {\npublic static void main(String[] args) {\n\taa:\n\t\tfor(int i=1;i<=3;i++){\n\t\t\tbb:\n\t\t\t\tfor(int j=1;j<=3;j++){\n\t\t\t\t\tif(i==2&&j==2){\n\t\t\t\t\t\tbreak bb;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(i+\" \"+j);\n\t\t\t\t}\n\t\t}\n}\n}\n"], "Language": "Java", "Description": ["We can have a name of each Java for loop. To do so, we use label before the for loop. It is useful if we have nested for loop so that we can break/continue specific for loop.", "Usually, break and continue keywords breaks/continues the innermost for loop only.", "Output:", "If you use ", ", it will break inner loop only which is the default behavior of any loop.", "Output:"], "URL": "https://www.javatpoint.com/java-for-loop"},
{"Title": "Loops in Java", "subtitle": "Java Infinitive For Loop", "Code": ["\nfor(;;){\n//code to be executed\n}\n", "\n//Java program to demonstrate the use of infinite for loop\n//which prints an statement\npublic class ForExample {\npublic static void main(String[] args) {\n    //Using no condition in for loop\n\tfor(;;){\n\t\tSystem.out.println(\"infinitive loop\");\n\t}\n}\n}\n"], "Language": "Java", "Description": ["If you use two semicolons ;; in the for loop, it will be infinitive for loop.", "Output:", "Now, you need to press ctrl+c to exit from the program."], "URL": "https://www.javatpoint.com/java-for-loop"},
{"Title": "Java While Loop", "subtitle": "Java Infinitive While Loop", "Code": ["\nwhile(true){\n//code to be executed\n}\n", "\npublic class WhileExample2 {\npublic static void main(String[] args) {\n\twhile(true){\n\t\tSystem.out.println(\"infinitive while loop\");\n\t}\n}\n}\n"], "Language": "Java", "Description": ["If you pass ", " in the while loop, it will be infinitive while loop.", "Output:", "Now, you need to press ctrl+c to exit from the program.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-while-loop"},
{"Title": "Java do-while Loop", "subtitle": "Java Infinitive do-while Loop", "Code": ["\ndo{\n//code to be executed\n}while(true);\n", "\npublic class DoWhileExample2 {\npublic static void main(String[] args) {\n\tdo{\n\t\tSystem.out.println(\"infinitive do while loop\");\n\t}while(true);\n}\n}\n"], "Language": "Java", "Description": ["If you pass ", " in the do-while loop, it will be infinitive do-while loop.", "Output:", "Now, you need to press ctrl+c to exit from the program.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-do-while-loop"},
{"Title": "Java Break Statement", "subtitle": "Java Break Statement with Loop", "Code": ["\n//Java Program to demonstrate the use of break statement  \n//inside the for loop.\npublic class BreakExample {\npublic static void main(String[] args) {\n    //using for loop\n    for(int i=1;i<=10;i++){\n    \tif(i==5){\n    \t    //breaking the loop\n    \t\tbreak;\n    \t}\n    \tSystem.out.println(i);\n    }\n}\n}\n"], "Language": "Java", "Description": ["Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-break"},
{"Title": "Java Break Statement", "subtitle": "Java Break Statement with Inner Loop", "Code": ["\n//Java Program to illustrate the use of break statement  \n//inside an inner loop \npublic class BreakExample2 {\npublic static void main(String[] args) {\n            //outer loop \n\t        for(int i=1;i<=3;i++){  \n\t                //inner loop\n\t                for(int j=1;j<=3;j++){  \n\t                    if(i==2&&j==2){  \n\t                        //using break statement inside the inner loop\n\t                        break;  \n\t                    }  \n\t                    System.out.println(i+\" \"+j);  \n\t                }  \n\t        }  \n}\n}\n"], "Language": "Java", "Description": ["It breaks inner loop only if you use break statement inside the inner loop.", "Output:"], "URL": "https://www.javatpoint.com/java-break"},
{"Title": "Java Break Statement", "subtitle": "Java Break Statement with Labeled For Loop", "Code": ["\n//Java Program to illustrate the use of continue statement\n//with label inside an inner loop to break outer loop\npublic class BreakExample3 {\npublic static void main(String[] args) {\n            aa:\n\t        for(int i=1;i<=3;i++){  \n\t                bb:\n\t                for(int j=1;j<=3;j++){  \n\t                    if(i==2&&j==2){  \n\t                        //using break statement with label\n\t                        break aa;  \n\t                    }  \n\t                    System.out.println(i+\" \"+j);  \n\t                }  \n\t        }  \n}\n}\n"], "Language": "Java", "Description": ["We can use break statement with a label. This feature is introduced since JDK 1.5. So, we can break any loop in Java now whether it is outer loop or inner.", "Output:"], "URL": "https://www.javatpoint.com/java-break"},
{"Title": "Java Break Statement", "subtitle": "Java Break Statement in while loop", "Code": ["\n//Java Program to demonstrate the use of break statement\n//inside the while loop.\npublic class BreakWhileExample {\npublic static void main(String[] args) {\n    //while loop\n    int i=1;\n    while(i<=10){\n        if(i==5){\n    \t    //using break statement\n            i++;\n    \t\tbreak;//it will break the loop\n    \t}\n    \tSystem.out.println(i);\n        i++;\n    }\n}\n}\n"], "Language": "Java", "Description": ["Output:"], "URL": "https://www.javatpoint.com/java-break"},
{"Title": "Java Break Statement", "subtitle": "Java Break Statement in do-while loop", "Code": ["\n//Java Program to demonstrate the use of break statement\n//inside the Java do-while loop.\npublic class BreakDoWhileExample {\npublic static void main(String[] args) {\n    //declaring variable\n    int i=1;\n    //do-while loop\n    do{\n        if(i==5){\n    \t   //using break statement\n           i++;\n    \t   break;//it will break the loop\n    \t}\n    \tSystem.out.println(i);\n        i++;\n    }while(i<=10);\n}\n}\n"], "Language": "Java", "Description": ["Output:"], "URL": "https://www.javatpoint.com/java-break"},
{"Title": "Java Break Statement", "subtitle": "Java Break Statement with Switch", "Code": [], "Language": "Java", "Description": ["To understand the example of break with switch statement, please visit here: ", "."], "URL": "https://www.javatpoint.com/java-break"},
{"Title": "Java Continue Statement", "subtitle": "Java Continue Statement Example", "Code": ["\n//Java Program to demonstrate the use of continue statement\n//inside the for loop.\npublic class ContinueExample {\npublic static void main(String[] args) {\n    //for loop\n    for(int i=1;i<=10;i++){\n    \tif(i==5){\n    \t    //using continue statement\n    \t\tcontinue;//it will skip the rest statement\n    \t}\n    \tSystem.out.println(i);\n    }\n}\n}\n"], "Language": "Java", "Description": ["Output:", "As you can see in the above output, 5 is not printed on the console. It is because the loop is continued when it reaches to 5.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-continue"},
{"Title": "Java Continue Statement", "subtitle": "Java Continue Statement with Inner Loop", "Code": ["\n//Java Program to illustrate the use of continue statement\n//inside an inner loop\npublic class ContinueExample2 {\npublic static void main(String[] args) {\n            //outer loop\n\t        for(int i=1;i<=3;i++){  \n\t                //inner loop\n\t                for(int j=1;j<=3;j++){  \n\t                    if(i==2&&j==2){  \n\t                        //using continue statement inside inner loop\n\t                        continue;  \n\t                    }  \n\t                    System.out.println(i+\" \"+j);  \n\t                }  \n\t        }  \n}\n}\n"], "Language": "Java", "Description": ["It continues inner loop only if you use the continue statement inside the inner loop.", "Output:"], "URL": "https://www.javatpoint.com/java-continue"},
{"Title": "Java Continue Statement", "subtitle": "Java Continue Statement with Labeled For Loop", "Code": ["\n//Java Program to illustrate the use of continue statement\n//with label inside an inner loop to continue outer loop\npublic class ContinueExample3 {\npublic static void main(String[] args) {\n            aa:\n\t        for(int i=1;i<=3;i++){  \n\t                bb:\n\t                for(int j=1;j<=3;j++){  \n\t                    if(i==2&&j==2){  \n\t                        //using continue statement with label\n\t                        continue aa;  \n\t                    }  \n\t                    System.out.println(i+\" \"+j);  \n\t                }  \n\t        }  \n}\n}\n"], "Language": "Java", "Description": ["We can use continute statement with a label. This feature is introduced since JDK 1.5. So, we can continue any loop in Java now whether it is outer loop or inner.", "Output:"], "URL": "https://www.javatpoint.com/java-continue"},
{"Title": "Java Continue Statement", "subtitle": "Java Continue Statement in while loop", "Code": ["\n//Java Program to demonstrate the use of continue statement\n//inside the while loop.\npublic class ContinueWhileExample {\npublic static void main(String[] args) {\n    //while loop\n    int i=1;\n    while(i<=10){\n        if(i==5){\n    \t    //using continue statement\n            i++;\n    \t\tcontinue;//it will skip the rest statement\n    \t}\n    \tSystem.out.println(i);\n        i++;\n    }\n}\n}\n"], "Language": "Java", "Description": ["Output:"], "URL": "https://www.javatpoint.com/java-continue"},
{"Title": "Java Continue Statement", "subtitle": "Java Continue Statement in do-while loop", "Code": ["\n//Java Program to demonstrate the use of continue statement\n//inside the Java do-while loop.\npublic class ContinueDoWhileExample {\npublic static void main(String[] args) {\n    //declaring variable\n    int i=1;\n    //do-while loop\n    do{\n        if(i==5){\n    \t        //using continue statement\n                 i++;\n    \t\tcontinue;//it will skip the rest statement\n    \t}\n    \tSystem.out.println(i);\n        i++;\n    }while(i<=10);\n}\n}\n"], "Language": "Java", "Description": ["Output:"], "URL": "https://www.javatpoint.com/java-continue"},
{"Title": "Java Comments", "subtitle": "Types of Java Comments", "Code": [], "Language": "Java", "Description": ["There are 3 types of comments in java.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-comments"},
{"Title": "Java Comments", "subtitle": "1) Java Single Line Comment", "Code": ["\n//This is single line comment\n", "\npublic class CommentExample1 {\npublic static void main(String[] args) {\n    int i=10;//Here, i is a variable\n    System.out.println(i);\n}\n}\n"], "Language": "Java", "Description": ["The single line comment is used to comment only one line.", "Output:"], "URL": "https://www.javatpoint.com/java-comments"},
{"Title": "Java Comments", "subtitle": "2) Java Multi Line Comment", "Code": ["\n/*\nThis \nis \nmulti line \ncomment\n*/\n", "\npublic class CommentExample2 {\npublic static void main(String[] args) {\n/* Let's declare and\n print variable in java. */\n    int i=10;\n    System.out.println(i);\n}\n}\n"], "Language": "Java", "Description": ["The multi line comment is used to comment multiple lines of code.", "Output:"], "URL": "https://www.javatpoint.com/java-comments"},
{"Title": "Java Comments", "subtitle": "3) Java Documentation Comment", "Code": ["\n/**\nThis \nis \ndocumentation \ncomment\n*/\n", "\n/** The Calculator class provides methods to get addition and subtraction of given 2 numbers.*/\npublic class Calculator {\n/** The add() method returns addition of given numbers.*/\npublic static int add(int a, int b){return a+b;}\n/** The sub() method returns subtraction of given numbers.*/\npublic static int sub(int a, int b){return a-b;}\n}\n"], "Language": "Java", "Description": ["The documentation comment is used to create documentation API. To create documentation API, you need to use ", ".", "Compile it by javac tool:", "Create Documentation API by javadoc tool:", "Now, there will be HTML files created for your Calculator class in the current directory. Open the HTML files and see the explanation of Calculator class provided through documentation comment."], "URL": "https://www.javatpoint.com/java-comments"},
{"Title": "Java Programs", "subtitle": "1) ", "Code": [], "Language": "Java", "Description": ["Write a java program to print fibonacci series without using recursion and using recursion.", " 10", " 0 1 1 2 3 5 8 13 21 34", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "2) ", "Code": [], "Language": "Java", "Description": ["Write a java program to check prime number.", " 44", " not prime number", " 7", " prime number"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "3) ", "Code": [], "Language": "Java", "Description": ["Write a java program to check palindrome number.", " 329", " not palindrome number", " 12321", " palindrome number"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "4) ", "Code": [], "Language": "Java", "Description": ["Write a java program to print factorial of a number.", " 5", " 120", " 6", " 720"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "5) ", "Code": [], "Language": "Java", "Description": ["Write a java program to check Armstrong number.", " 153", " Armstrong number", " 22", " not Armstrong number"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "Java Sorting Programs", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "6) ", "Code": [], "Language": "Java", "Description": ["Write a java program to sort an array elements using bubble sort algorithm.", " 18 9 33 4 84 32", " 4 9 18 32 33 84"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "7) ", "Code": [], "Language": "Java", "Description": ["Write a java program to sort an array elements using selection sort algorithm.", " 18 9 33 4 84 32", " 4 9 18 32 33 84"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "8) ", "Code": [], "Language": "Java", "Description": ["Write a java program to sort an array elements using insertion sort algorithm.", " 18 9 33 4 84 32", " 4 9 18 32 33 84"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "Java Searching Programs", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "9) ", "Code": [], "Language": "Java", "Description": ["Write a java program to perform linear search in java."], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "10) ", "Code": [], "Language": "Java", "Description": ["Write a java program to perform binary search in java."], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "Java Array Programs", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "11) ", "Code": [], "Language": "Java", "Description": ["Write a java program to find 3rd largest number in an array.", " 1,2,5,6,3,2", " 3"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "12) ", "Code": [], "Language": "Java", "Description": ["Write a java program to find 2nd largest number in an array.", " 1,2,5,6,3,2", " 5"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "13) ", "Code": [], "Language": "Java", "Description": ["Write a java program to find largest number in an array.", " 1,2,5,6,3,2", " 6"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "14) ", "Code": [], "Language": "Java", "Description": ["Write a java program to find 2nd smallest number in an array.", " 1,2,5,6,3,2", " 2"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "15) ", "Code": [], "Language": "Java", "Description": ["Write a java program to find smallest number in an array.", " 1,2,5,6,3,2", " 1"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "16) ", "Code": [], "Language": "Java", "Description": ["Write a java program to remove duplicate element in an array.", " 10,20,20,30,30,40,50,50", " 10 20 30 40 50 "], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "17) ", "Code": [], "Language": "Java", "Description": ["Write a java program to add two matrices."], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "18) ", "Code": [], "Language": "Java", "Description": ["Write a java program to multiply two matrices."], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "19) ", "Code": [], "Language": "Java", "Description": ["Write a java program to print odd and even number from an array.", " 1,2,5,6,3,2"], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java Programs", "subtitle": "20) ", "Code": [], "Language": "Java", "Description": ["Write a java program to transpose a matrix."], "URL": "https://www.javatpoint.com/java-programs"},
{"Title": "Java OOPs Concepts", "subtitle": "OOPs (Object-Oriented Programming System)", "Code": [], "Language": "Java", "Description": [" means a real-world entity such as a pen, chair, table, computer, watch, etc.  ", " is a methodology or paradigm to design a program using classes and objects. It simplifies the software development and maintenance by providing some concepts:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-oops-concepts"},
{"Title": "Java OOPs Concepts", "subtitle": "Object", "Code": [], "Language": "Java", "Description": ["Any entity that has state and behavior is known as an object. For example a chair, pen, table, keyboard, bike, etc. It can be physical or logical.", "An Object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can communicate without knowing the details of each other's data or code. The only necessary thing is the type of message accepted and the type of response returned by the objects.", " A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.\n"], "URL": "https://www.javatpoint.com/java-oops-concepts"},
{"Title": "Java OOPs Concepts", "subtitle": "Class", "Code": [], "Language": "Java", "Description": [" is called class. It is a logical entity.", "A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.", ", it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.", "If ", ", it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc. ", "In Java, we use method overloading and method overriding to achieve polymorphism.", "Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.", " is known as abstraction. For example phone call, we don't know the internal processing. ", "In Java, we use abstract class and interface to achieve abstraction.", ". For example capsule, it is wrapped with different medicines.", " A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here."], "URL": "https://www.javatpoint.com/java-oops-concepts"},
{"Title": "Java OOPs Concepts", "subtitle": "Advantage of OOPs over Procedure-oriented programming language", "Code": [], "Language": "Java", "Description": ["\n1) OOPs makes development and maintenance easier whereas in a procedure-oriented programming language it is not easy to manage if code grows as project size increases.\n", "2) OOPs provides data hiding whereas in a procedure-oriented programming language a global data can be accessed from anywhere.\n", "Figure: Data Representation in Procedure-Oriented Programming", "Figure: Data Representation in Object-Oriented Programming", "3) OOPs provides the ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language."], "URL": "https://www.javatpoint.com/java-oops-concepts"},
{"Title": "Java OOPs Concepts", "subtitle": "What is the difference between an object-oriented programming language and object-based programming language?", "Code": [], "Language": "Java", "Description": ["Object-based programming language follows all the features of OOPs except Inheritance. JavaScript and VBScript are examples of object-based programming languages."], "URL": "https://www.javatpoint.com/java-oops-concepts"},
{"Title": "Java Naming conventions", "subtitle": "Advantage of naming conventions in java", "Code": [], "Language": "Java", "Description": ["\nBy using standard Java naming conventions, you make your code easier to read for yourself and for other programmers. Readability of Java program is very important. It indicates that ", " is spent to figure out what the code does.\n", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-naming-conventions"},
{"Title": "Java Naming conventions", "subtitle": "CamelCase in java naming conventions", "Code": [], "Language": "Java", "Description": ["Java follows camelcase syntax for naming the class, interface, method and variable.", "If name is combined with two words, second word will start with uppercase letter always e.g. actionPerformed(), firstName, ActionEvent, ActionListener etc."], "URL": "https://www.javatpoint.com/java-naming-conventions"},
{"Title": "Objects and Classes in Java", "subtitle": "What is a class in Java", "Code": ["\nclass <class_name>{\n    field;\n    method;\n}\n", "\n//Java Program to illustrate how to define a class and fields\n//Defining a Student class.\nclass Student{\n //defining fields\n int id;//field or data member or instance variable\n String name;\n //creating main method inside the Student class\n public static void main(String args[]){\n  //Creating an object or instance\n  Student s1=new Student();//creating an object of Student\n  //Printing values of the object\n  System.out.println(s1.id);//accessing member through reference variable\n  System.out.println(s1.name);\n }\n}\n", "\n//Java Program to demonstrate having the main method in \n//another class\n//Creating Student class.\nclass Student{\n int id;\n String name;\n}\n//Creating another class TestStudent1 which contains the main method\nclass TestStudent1{\n public static void main(String args[]){\n  Student s1=new Student();\n  System.out.println(s1.id);\n  System.out.println(s1.name);\n }\n}\n"], "Language": "Java", "Description": ["A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical.", "A class in Java can contain:", "A variable which is created inside the class but outside the method is known as an instance variable. Instance variable doesn't get memory at compile time. It gets memory at runtime when an object or instance is created. That is why it is known as an instance variable.", "In Java, a method is like a function which is used to expose the behavior of an object.", "The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.", "In this example, we have created a Student class which has two data members id and name. We are creating the object of the Student class by new keyword and printing the object's value.", "Here, we are creating a main() method inside the class.", "File: Student.java", "Output:", "In real time development, we create classes and use it from another class. It is a better approach than previous one. Let's see a simple example, where we are having main() method in another class.", "We can have multiple classes in different java files or single java file. If you define multiple classes in a single java source file, it is a good idea to save the file name with the class name which has main() method.", "File: TestStudent1.java", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/object-and-class-in-java"},
{"Title": "Objects and Classes in Java", "subtitle": "3 Ways to initialize object", "Code": ["\nclass Student{\n int id;\n String name;\n}\nclass TestStudent2{\n public static void main(String args[]){\n  Student s1=new Student();\n  s1.id=101;\n  s1.name=\"Sonoo\";\n  System.out.println(s1.id+\" \"+s1.name);//printing members with a white space\n }\n}\n", "\nclass Student{\n int id;\n String name;\n}\nclass TestStudent3{\n public static void main(String args[]){\n  //Creating objects\n  Student s1=new Student();\n  Student s2=new Student();\n  //Initializing objects\n  s1.id=101;\n  s1.name=\"Sonoo\";\n  s2.id=102;\n  s2.name=\"Amit\";\n  //Printing data\n  System.out.println(s1.id+\" \"+s1.name);\n  System.out.println(s2.id+\" \"+s2.name);\n }\n}\n", "\nclass Student{\n int rollno;\n String name;\n void insertRecord(int r, String n){\n  rollno=r;\n  name=n;\n }\n void displayInformation(){System.out.println(rollno+\" \"+name);}\n}\nclass TestStudent4{\n public static void main(String args[]){\n  Student s1=new Student();\n  Student s2=new Student();\n  s1.insertRecord(111,\"Karan\");\n  s2.insertRecord(222,\"Aryan\");\n  s1.displayInformation();\n  s2.displayInformation();\n }\n}\n", "\nclass Employee{\n\tint id;\n\tString name;\n\tfloat salary;\n\tvoid insert(int i, String n, float s) {\n\t\tid=i;\n\t\tname=n;\n\t\tsalary=s;\n\t}\n\tvoid display(){System.out.println(id+\" \"+name+\" \"+salary);}\n}\npublic class TestEmployee {\npublic static void main(String[] args) {\n\tEmployee e1=new Employee();\n\tEmployee e2=new Employee();\n\tEmployee e3=new Employee();\n\te1.insert(101,\"ajeet\",45000);\n\te2.insert(102,\"irfan\",25000);\n\te3.insert(103,\"nakul\",55000);\n\te1.display();\n\te2.display();\n\te3.display();\n}\n}\n", "\nclass Rectangle{\n int length;\n int width;\n void insert(int l, int w){\n  length=l;\n  width=w;\n }\n void calculateArea(){System.out.println(length*width);}\n}\nclass TestRectangle1{\n public static void main(String args[]){\n  Rectangle r1=new Rectangle();\n  Rectangle r2=new Rectangle();\n  r1.insert(11,5);\n  r2.insert(3,15);\n  r1.calculateArea();\n  r2.calculateArea();\n}\n}\n"], "Language": "Java", "Description": ["There are 3 ways to initialize object in java.", "Initializing an object means storing data into the object. Let's see a simple example where we are going to initialize the object through a reference variable.", "File: TestStudent2.java", "Output:", "We can also create multiple objects and store information in it through reference variable.", "File: TestStudent3.java", "Output:", "In this example, we are creating the two objects of Student class and initializing the value to these objects by invoking the insertRecord method.\nHere, we are displaying the state (data) of the objects by invoking the displayInformation() method.", "File: TestStudent4.java", "Output:", "As you can see in the above figure, object gets the memory in heap memory area. The reference variable refers to the object allocated in the heap memory area.\nHere, s1 and s2 both are reference variables that refer to the objects allocated in memory.", "We will learn about constructors in java later.", "Let's see an example where we are maintaining records of employees.", "File: TestEmployee.java", "Output:", "There is given another example that maintains the records of Rectangle class.", "File: TestRectangle1.java", "Output:"], "URL": "https://www.javatpoint.com/object-and-class-in-java"},
{"Title": "Objects and Classes in Java", "subtitle": "What are the different ways to create an object in Java?", "Code": [], "Language": "Java", "Description": ["There are many ways to create an object in java. They are:", "We will learn these ways to create object later."], "URL": "https://www.javatpoint.com/object-and-class-in-java"},
{"Title": "Objects and Classes in Java", "subtitle": "Anonymous object", "Code": ["\nnew Calculation();//anonymous object\n", "\nCalculation c=new Calculation();\nc.fact(5);\n", "\nnew Calculation().fact(5);\n", "\nclass Calculation{\n void fact(int  n){\n  int fact=1;\n  for(int i=1;i<=n;i++){\n   fact=fact*i;\n  }\n System.out.println(\"factorial is \"+fact);\n}\npublic static void main(String args[]){\n new Calculation().fact(5);//calling method with anonymous object\n}\n}\n", "\nint a=10, b=20;\n", "\nRectangle r1=new Rectangle(), r2=new Rectangle();//creating two objects\n", "\n//Java Program to illustrate the use of Rectangle class which\n//has length and width data members\nclass Rectangle{\n int length;\n int width;\n void insert(int l,int w){\n  length=l;\n  width=w;\n }\n void calculateArea(){System.out.println(length*width);}\n}\nclass TestRectangle2{\n public static void main(String args[]){\n  Rectangle r1=new Rectangle(),r2=new Rectangle();//creating two objects\n  r1.insert(11,5);\n  r2.insert(3,15);\n  r1.calculateArea();\n  r2.calculateArea();\n}\n}\n", "\n//Java Program to demonstrate the working of a banking-system\n//where we deposit and withdraw amount from our account.\n//Creating an Account class which has deposit() and withdraw() methods\nclass Account{\nint acc_no;\nString name;\nfloat amount;\n//Method to initialize object\nvoid insert(int a,String n,float amt){\nacc_no=a;\nname=n;\namount=amt;\n}\n//deposit method\nvoid deposit(float amt){\namount=amount+amt;\nSystem.out.println(amt+\" deposited\");\n}\n//withdraw method\nvoid withdraw(float amt){\nif(amount"], "Language": "Java", "Description": ["Anonymous simply means nameless. An object which has no reference is known as an anonymous object. It can be used at the time of object creation only.", "If you have to use an object only once, an anonymous object is a good approach. For example:", "Calling method through a reference:", "Calling method through an anonymous object", "Let's see the full example of an anonymous object in Java.", "Output:", "We can create multiple objects by one type only as we do in case of primitives.", "Initialization of primitive variables:", "Initialization of refernce variables:", "Let's see the example:", "Output:", "File: TestAccount.java", "Output:"], "URL": "https://www.javatpoint.com/object-and-class-in-java"},
{"Title": "Constructors in Java", "subtitle": "Types of Java constructors", "Code": [], "Language": "Java", "Description": ["There are two types of constructors in Java:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-constructor"},
{"Title": "Constructors in Java", "subtitle": "Java Default Constructor", "Code": ["\n\n<class_name>(){}\n\n"], "Language": "Java", "Description": ["A constructor is called \"Default Constructor\" when it doesn't have any parameter. "], "URL": "https://www.javatpoint.com/java-constructor"},
{"Title": "Constructors in Java", "subtitle": "Example of default constructor", "Code": ["\n//Java Program to create and call a default constructor\nclass Bike1{\n//creating a default constructor\nBike1(){System.out.println(\"Bike is created\");}\n//main method\npublic static void main(String args[]){\n//calling a default constructor\nBike1 b=new Bike1();\n}\n}\n", "\n//Let us see another example of default constructor\n//which displays the default values\nclass Student3{\nint id;\nString name;\n//method to display the value of id and name\nvoid display(){System.out.println(id+\" \"+name);}\n\npublic static void main(String args[]){\n//creating objects\nStudent3 s1=new Student3();\nStudent3 s2=new Student3();\n//displaying values of the object\ns1.display();\ns2.display();\n}\n}\n", "\n//Java Program to demonstrate the use of parameterized constructor\nclass Student4{\n    int id;\n    String name;\n    //creating a parameterized constructor\n    Student4(int i,String n){\n    id = i;\n    name = n;\n    }\n    //method to display the values\n    void display(){System.out.println(id+\" \"+name);}\n \n    public static void main(String args[]){\n    //creating objects and passing values\n    Student4 s1 = new Student4(111,\"Karan\");\n    Student4 s2 = new Student4(222,\"Aryan\");\n    //calling method to display the values of object\n    s1.display();\n    s2.display();\n   }\n}\n"], "Language": "Java", "Description": ["Output:", "The default constructor is used to provide the default values to the object like 0, null, etc., depending on the type.\n", "Output:", "In the above class,you are not creating any constructor so compiler provides you a default constructor. Here 0 and null values are provided by default constructor.\n", "A constructor which has a specific number of parameters is called a parameterized constructor. \n", "The parameterized constructor is used to provide different values to the distinct objects. However, you can provide the same values also.", "In this example, we have created the constructor of Student class that have two parameters. We can have any number of parameters in the constructor. ", "Output:"], "URL": "https://www.javatpoint.com/java-constructor"},
{"Title": "Constructors in Java", "subtitle": "Constructor Overloading in Java", "Code": ["\n//Java program to overload constructors in java\nclass Student5{\n    int id;\n    String name;\n    int age;\n    //creating two arg constructor\n    Student5(int i,String n){\n    id = i;\n    name = n;\n    }\n    //creating three arg constructor\n    Student5(int i,String n,int a){\n    id = i;\n    name = n;\n    age=a;\n    }\n    void display(){System.out.println(id+\" \"+name+\" \"+age);}\n \n    public static void main(String args[]){\n    Student5 s1 = new Student5(111,\"Karan\");\n    Student5 s2 = new Student5(222,\"Aryan\",25);\n    s1.display();\n    s2.display();\n   }\n}\n"], "Language": "Java", "Description": ["In Java, a constructor is just like a method but without return type. It can also be overloaded like Java methods. ", "Constructor overloading in Java is a technique of having more than one constructor with different parameter lists. They are arranged in a way that each constructor performs a different task. They are differentiated by the compiler by the number of parameters in the list and their types. \n", "Output:"], "URL": "https://www.javatpoint.com/java-constructor"},
{"Title": "Constructors in Java", "subtitle": "Difference between constructor and method in Java", "Code": [], "Language": "Java", "Description": ["There are many differences between constructors and methods. They are given below."], "URL": "https://www.javatpoint.com/java-constructor"},
{"Title": "Constructors in Java", "subtitle": "Java Copy Constructor", "Code": ["\n//Java program to initialize the values from one object to another\nclass Student6{\n    int id;\n    String name;\n    //constructor to initialize integer and string\n    Student6(int i,String n){\n    id = i;\n    name = n;\n    }\n    //constructor to initialize another object\n    Student6(Student6 s){\n    id = s.id;\n    name =s.name;\n    }\n    void display(){System.out.println(id+\" \"+name);}\n \n    public static void main(String args[]){\n    Student6 s1 = new Student6(111,\"Karan\");\n    Student6 s2 = new Student6(s1);\n    s1.display();\n    s2.display();\n   }\n}\n"], "Language": "Java", "Description": ["There is no copy constructor in java. However, we can copy the values from one object to another like copy constructor in C++.", "There are many ways to copy the values of one object into another in java. They are:", "In this example, we are going to copy the values of one object into another using java constructor.", "Output:"], "URL": "https://www.javatpoint.com/java-constructor"},
{"Title": "Constructors in Java", "subtitle": "Copying values without constructor", "Code": ["\nclass Student7{\n    int id;\n    String name;\n    Student7(int i,String n){\n    id = i;\n    name = n;\n    }\n    Student7(){}\n    void display(){System.out.println(id+\" \"+name);}\n \n    public static void main(String args[]){\n    Student7 s1 = new Student7(111,\"Karan\");\n    Student7 s2 = new Student7();\n    s2.id=s1.id;\n    s2.name=s1.name;\n    s1.display();\n    s2.display();\n   }\n}\n"], "Language": "Java", "Description": ["We can copy the values of one object into another by assigning the objects values to another object. In this case, there is no need to create the constructor.", "Output:", "Yes, it is the current class instance (You cannot use return type yet it returns a value).", "Yes, like object creation, starting a thread, calling a method, etc. You can perform any operation in the constructor as you perform in the method."], "URL": "https://www.javatpoint.com/java-constructor"},
{"Title": "Java static keyword", "subtitle": "1) Java static variable", "Code": ["\nclass Student{\n     int rollno;\n     String name;\n     String college=\"ITS\";\n}\n", "\n//Java Program to demonstrate the use of static variable\nclass Student{\n   int rollno;//instance variable\n   String name;\n   static String college =\"ITS\";//static variable\n   //constructor\n   Student(int r, String n){\n   rollno = r;\n   name = n;\n   }\n   //method to display the values\n   void display (){System.out.println(rollno+\" \"+name+\" \"+college);}\n}\n//Test class to show the values of objects\npublic class TestStaticVariable1{\n public static void main(String args[]){\n Student s1 = new Student(111,\"Karan\");\n Student s2 = new Student(222,\"Aryan\");\n //we can change the college of all objects by the single line of code\n //Student.college=\"BBDIT\";\n s1.display();\n s2.display();\n }\n}\n", "\n//Java Program to demonstrate the use of an instance variable\n//which get memory each time when we create an object of the class.\nclass Counter{\nint count=0;//will get memory each time when the instance is created\n\nCounter(){\ncount++;//incrementing value\nSystem.out.println(count);\n}\n\npublic static void main(String args[]){\n//Creating objects\nCounter c1=new Counter();\nCounter c2=new Counter();\nCounter c3=new Counter();\n}\n}\n", "\n//Java Program to illustrate the use of static variable which\n//is shared with all objects.\nclass Counter2{\nstatic int count=0;//will get memory only once and retain its value\n\nCounter2(){\ncount++;//incrementing the value of static variable\nSystem.out.println(count);\n}\n\npublic static void main(String args[]){\n//creating objects\nCounter2 c1=new Counter2();\nCounter2 c2=new Counter2();\nCounter2 c3=new Counter2();\n}\n}\n\n"], "Language": "Java", "Description": ["If you declare any variable as static, it is known as a static variable.", "It makes your program ", " (i.e., it saves memory).", "Suppose there are 500 students in my college, now all instance data members will get memory each time when the object is created. All students have its unique rollno and name, so instance data member is good in such case. Here, \"college\" refers to the common property of all objects. If we make it static, this field will get the memory only once.", "Output:", "In this example, we have created an instance variable named count which is incremented in the constructor. Since instance variable gets the memory at the time of object creation, each object will have the copy of the instance variable. If it is incremented, it won't reflect other objects. So each object will have the value 1 in the count variable.", "Output:", "As we have mentioned above, static variable will get the memory only once, if any object changes the value of the static variable, it will retain its value.", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/static-keyword-in-java"},
{"Title": "Java static keyword", "subtitle": "2) Java static method", "Code": ["\n//Java Program to demonstrate the use of a static method.\nclass Student{\n     int rollno;\n     String name;\n     static String college = \"ITS\";\n     //static method to change the value of static variable\n     static void change(){\n     college = \"BBDIT\";\n     }\n     //constructor to initialize the variable\n     Student(int r, String n){\n     rollno = r;\n     name = n;\n     }\n     //method to display values\n     void display(){System.out.println(rollno+\" \"+name+\" \"+college);}\n}\n//Test class to create and display the values of object\npublic class TestStaticMethod{\n    public static void main(String args[]){\n    Student.change();//calling change method\n    //creating objects\n    Student s1 = new Student(111,\"Karan\");\n    Student s2 = new Student(222,\"Aryan\");\n    Student s3 = new Student(333,\"Sonoo\");\n    //calling display method\n    s1.display();\n    s2.display();\n    s3.display();\n    }\n}\n", "\n//Java Program to get the cube of a given number using the static method\n\nclass Calculate{\n  static int cube(int x){\n  return x*x*x;\n  }\n\n  public static void main(String args[]){\n  int result=Calculate.cube(5);\n  System.out.println(result);\n  }\n}\n", "\nclass A{\n int a=40;//non static\n \n public static void main(String args[]){\n  System.out.println(a);\n }\n}      \n"], "Language": "Java", "Description": ["If you apply static keyword with any method, it is known as static method.", "There are two main restrictions for the static method. They are:", "Ans) It is because the object is not required to call a static method. If it \n  were a non-static method, JVM creates an object first then call main()\nmethod that will lead the problem of extra memory allocation."], "URL": "https://www.javatpoint.com/static-keyword-in-java"},
{"Title": "Java static keyword", "subtitle": "3) Java static block", "Code": ["\nclass A2{\n  static{System.out.println(\"static block is invoked\");}\n  public static void main(String args[]){\n   System.out.println(\"Hello main\");\n  }\n}\n", "\nclass A3{\n  static{\n  System.out.println(\"static block is invoked\");\n  System.exit(0);\n  }\n}\n"], "Language": "Java", "Description": ["Ans) No, one of the ways was the static block, but it was possible till JDK 1.6. Since JDK 1.7, it is not possible to execute a java class without the main method.", "Output:", "Since JDK 1.7 and above, output would be:"], "URL": "https://www.javatpoint.com/static-keyword-in-java"},
{"Title": "this keyword in java", "subtitle": "Usage of java this keyword", "Code": ["\nclass Student{\nint rollno;\nString name;\nfloat fee;\nStudent(int rollno,String name,float fee){\nrollno=rollno;\nname=name;\nfee=fee;\n}\nvoid display(){System.out.println(rollno+\" \"+name+\" \"+fee);}\n}\nclass TestThis1{\npublic static void main(String args[]){\nStudent s1=new Student(111,\"ankit\",5000f);\nStudent s2=new Student(112,\"sumit\",6000f);\ns1.display();\ns2.display();\n}}\n", "\nclass Student{\nint rollno;\nString name;\nfloat fee;\nStudent(int rollno,String name,float fee){\nthis.rollno=rollno;\nthis.name=name;\nthis.fee=fee;\n}\nvoid display(){System.out.println(rollno+\" \"+name+\" \"+fee);}\n}\n\nclass TestThis2{\npublic static void main(String args[]){\nStudent s1=new Student(111,\"ankit\",5000f);\nStudent s2=new Student(112,\"sumit\",6000f);\ns1.display();\ns2.display();\n}}\n", "\nclass Student{\nint rollno;\nString name;\nfloat fee;\nStudent(int r,String n,float f){\nrollno=r;\nname=n;\nfee=f;\n}\nvoid display(){System.out.println(rollno+\" \"+name+\" \"+fee);}\n}\n\nclass TestThis3{\npublic static void main(String args[]){\nStudent s1=new Student(111,\"ankit\",5000f);\nStudent s2=new Student(112,\"sumit\",6000f);\ns1.display();\ns2.display();\n}}\n", "\nclass A{\nvoid m(){System.out.println(\"hello m\");}\nvoid n(){\nSystem.out.println(\"hello n\");\n//m();//same as this.m()\nthis.m();\n}\n}\nclass TestThis4{\npublic static void main(String args[]){\nA a=new A();\na.n();\n}}\n", "\nclass A{\nA(){System.out.println(\"hello a\");}\nA(int x){\nthis();\nSystem.out.println(x);\n}\n}\nclass TestThis5{\npublic static void main(String args[]){\nA a=new A(10);\n}}\n", "\nclass A{\nA(){\nthis(5);\nSystem.out.println(\"hello a\");\n}\nA(int x){\nSystem.out.println(x);\n}\n}\nclass TestThis6{\npublic static void main(String args[]){\nA a=new A();\n}}\n", "\nclass Student{\nint rollno;\nString name,course;\nfloat fee;\nStudent(int rollno,String name,String course){\nthis.rollno=rollno;\nthis.name=name;\nthis.course=course;\n}\nStudent(int rollno,String name,String course,float fee){\nthis(rollno,name,course);//reusing constructor\nthis.fee=fee;\n}\nvoid display(){System.out.println(rollno+\" \"+name+\" \"+course+\" \"+fee);}\n}\nclass TestThis7{\npublic static void main(String args[]){\nStudent s1=new Student(111,\"ankit\",\"java\");\nStudent s2=new Student(112,\"sumit\",\"java\",6000f);\ns1.display();\ns2.display();\n}}\n", "\nclass Student{\nint rollno;\nString name,course;\nfloat fee;\nStudent(int rollno,String name,String course){\nthis.rollno=rollno;\nthis.name=name;\nthis.course=course;\n}\nStudent(int rollno,String name,String course,float fee){\nthis.fee=fee;\nthis(rollno,name,course);//C.T.Error\n}\nvoid display(){System.out.println(rollno+\" \"+name+\" \"+course+\" \"+fee);}\n}\nclass TestThis8{\npublic static void main(String args[]){\nStudent s1=new Student(111,\"ankit\",\"java\");\nStudent s2=new Student(112,\"sumit\",\"java\",6000f);\ns1.display();\ns2.display();\n}}\n", "\nclass S2{\n  void m(S2 obj){\n  System.out.println(\"method is invoked\");\n  }\n  void p(){\n  m(this);\n  }\n  public static void main(String args[]){\n  S2 s1 = new S2();\n  s1.p();\n  }\n}\n", "\nclass B{\n  A4 obj;\n  B(A4 obj){\n    this.obj=obj;\n  }\n  void display(){\n    System.out.println(obj.data);//using data member of A4 class\n  }\n}\n\nclass A4{\n  int data=10;\n  A4(){\n   B b=new B(this);\n   b.display();\n  }\n  public static void main(String args[]){\n   A4 a=new A4();\n  }\n}\n", "\nreturn_type method_name(){\nreturn this;\n}\n", "\nclass A{\nA getA(){\nreturn this;\n}\nvoid msg(){System.out.println(\"Hello java\");}\n}\nclass Test1{\npublic static void main(String args[]){\nnew A().getA().msg();\n}\n}\n", "\nclass A5{\nvoid m(){\nSystem.out.println(this);//prints same reference ID\n}\npublic static void main(String args[]){\nA5 obj=new A5();\nSystem.out.println(obj);//prints the reference ID\nobj.m();\n}\n}\n"], "Language": "Java", "Description": ["Here is given the 6 usage of java this keyword.", " If you are beginner to java, lookup only three usage of this keyword.", "The this keyword can be used to refer current class instance variable. If there is ambiguity between the instance variables and parameters, this keyword resolves the problem of ambiguity. ", "Output:", "In the above example, parameters (formal arguments) and instance variables are same. So, we are using this keyword to distinguish local variable and instance variable. ", "Output:", "If local variables(formal arguments) and instance variables are different, there is no need to use this keyword like in the following program:", "Output:", "You may invoke the method of the current class by using the this keyword. If you don't use the this keyword, compiler automatically adds this keyword while invoking the method. Let's see the example", "Output:", "The this() constructor call can be used to invoke the current class constructor. It is used to reuse the constructor. In other words, it is used for constructor chaining.", "Output:", "Output:", "The this() constructor call should be used to reuse the constructor from the constructor. It maintains the chain between the constructors i.e. it is used for constructor chaining. Let's see the example given below that displays the actual use of this keyword.", "Output:", "The this keyword can also be passed as an argument in the method. It is mainly used in the event handling. Let's see the example:", "Output:", "In event handling (or) in a situation where we have to provide reference of a class to another one. It is used to reuse one object in many methods.", "We can pass the this keyword in the constructor also. It is useful if we have to use one object in multiple classes. Let's see the example:", "We can return this keyword as an statement from the method. In such case, return type of the method must be the class type (non-primitive). Let's see the example:", "Output:", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/this-keyword"},
{"Title": "Inheritance in Java", "subtitle": "Types of inheritance in java", "Code": [], "Language": "Java", "Description": ["On the basis of class, there can be three types of inheritance in java: single, multilevel and hierarchical.", "In java programming, multiple and hybrid inheritance is supported through interface only. We will learn about interfaces later.", "When one class inherits multiple classes, it is known as multiple inheritance. For Example:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/inheritance-in-java"},
{"Title": "Inheritance in Java", "subtitle": "Single Inheritance Example", "Code": ["\nclass Animal{\nvoid eat(){System.out.println(\"eating...\");}\n}\nclass Dog extends Animal{\nvoid bark(){System.out.println(\"barking...\");}\n}\nclass TestInheritance{\npublic static void main(String args[]){\nDog d=new Dog();\nd.bark();\nd.eat();\n}}\n"], "Language": "Java", "Description": ["File: TestInheritance.java", "Output:"], "URL": "https://www.javatpoint.com/inheritance-in-java"},
{"Title": "Inheritance in Java", "subtitle": "Multilevel Inheritance Example", "Code": ["\nclass Animal{\nvoid eat(){System.out.println(\"eating...\");}\n}\nclass Dog extends Animal{\nvoid bark(){System.out.println(\"barking...\");}\n}\nclass BabyDog extends Dog{\nvoid weep(){System.out.println(\"weeping...\");}\n}\nclass TestInheritance2{\npublic static void main(String args[]){\nBabyDog d=new BabyDog();\nd.weep();\nd.bark();\nd.eat();\n}}\n"], "Language": "Java", "Description": ["File: TestInheritance2.java", "Output:"], "URL": "https://www.javatpoint.com/inheritance-in-java"},
{"Title": "Inheritance in Java", "subtitle": "Hierarchical Inheritance Example", "Code": ["\nclass Animal{\nvoid eat(){System.out.println(\"eating...\");}\n}\nclass Dog extends Animal{\nvoid bark(){System.out.println(\"barking...\");}\n}\nclass Cat extends Animal{\nvoid meow(){System.out.println(\"meowing...\");}\n}\nclass TestInheritance3{\npublic static void main(String args[]){\nCat c=new Cat();\nc.meow();\nc.eat();\n//c.bark();//C.T.Error\n}}\n"], "Language": "Java", "Description": ["File: TestInheritance3.java", "Output:"], "URL": "https://www.javatpoint.com/inheritance-in-java"},
{"Title": "Inheritance in Java", "subtitle": "Q) Why multiple inheritance is not supported in java?", "Code": ["\nclass A{\nvoid msg(){System.out.println(\"Hello\");}\n}\nclass B{\nvoid msg(){System.out.println(\"Welcome\");}\n}\nclass C extends A,B{//suppose if it were\n \n Public Static void main(String args[]){\n   C obj=new C();\n   obj.msg();//Now which msg() method would be invoked?\n}\n}\n"], "Language": "Java", "Description": ["To reduce the complexity and simplify the language, multiple inheritance is not supported in java. ", "Consider a scenario where A, B, and C are three classes. The C class inherits A and B classes. If A and B classes have the same method and you call it from child class object, there will be ambiguity to call the method of A or B class.", "Since compile-time errors are better than runtime errors, Java renders compile-time error if you inherit 2 classes. So whether you have same method or different, there will be compile time error."], "URL": "https://www.javatpoint.com/inheritance-in-java"},
{"Title": "Method Overloading in Java", "subtitle": "Advantage of method overloading", "Code": ["\nclass Adder{\nstatic int add(int a,int b){return a+b;}\nstatic int add(int a,int b,int c){return a+b+c;}\n}\nclass TestOverloading1{\npublic static void main(String[] args){\nSystem.out.println(Adder.add(11,11));\nSystem.out.println(Adder.add(11,11,11));\n}}\n", "\nclass Adder{\nstatic int add(int a, int b){return a+b;}\nstatic double add(double a, double b){return a+b;}\n}\nclass TestOverloading2{\npublic static void main(String[] args){\nSystem.out.println(Adder.add(11,11));\nSystem.out.println(Adder.add(12.3,12.6));\n}}\n", "\nclass Adder{\nstatic int add(int a,int b){return a+b;}\nstatic double add(int a,int b){return a+b;}\n}\nclass TestOverloading3{\npublic static void main(String[] args){\nSystem.out.println(Adder.add(11,11));//ambiguity\n}}\n", "\nclass TestOverloading4{\npublic static void main(String[] args){System.out.println(\"main with String[]\");}\npublic static void main(String args){System.out.println(\"main with String\");}\npublic static void main(){System.out.println(\"main without args\");}\n}\n"], "Language": "Java", "Description": ["Method overloading ", ".", "There are two ways to overload the method in java", "In this example, we have created two methods, first add() method performs addition of two numbers and second add method performs addition of three numbers.", "In this example, we are creating static methods so that we don't need to create instance for calling methods.", "Output:", "In this example, we have created two methods that differs in data type. The first add method receives two integer arguments and second add method receives two double arguments.", "Output:", "In java, method overloading is not possible by changing the return type of the method only because of ambiguity. Let's see how ambiguity may occur:", "Output:", "System.out.println(Adder.add(11,11)); //Here, how can java determine which sum() method should be called?", "Yes, by method overloading. You can have any number of main methods in a class by method overloading. But JVM calls main() method which receives string array as arguments only. Let's see the simple example: ", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/method-overloading-in-java"},
{"Title": "Method Overloading in Java", "subtitle": "Method Overloading and Type Promotion", "Code": ["\n\nclass OverloadingCalculation1{\n  void sum(int a,long b){System.out.println(a+b);}\n  void sum(int a,int b,int c){System.out.println(a+b+c);}\n\n  public static void main(String args[]){\n  OverloadingCalculation1 obj=new OverloadingCalculation1();\n  obj.sum(20,20);//now second int literal will be promoted to long\n  obj.sum(20,20,20);\n\n  }\n}\n", "\nclass OverloadingCalculation2{\n  void sum(int a,int b){System.out.println(\"int arg method invoked\");}\n  void sum(long a,long b){System.out.println(\"long arg method invoked\");}\n\n  public static void main(String args[]){\n  OverloadingCalculation2 obj=new OverloadingCalculation2();\n  obj.sum(20,20);//now int arg sum() method gets invoked\n  }\n}\n", "\n\nclass OverloadingCalculation3{\n  void sum(int a,long b){System.out.println(\"a method invoked\");}\n  void sum(long a,int b){System.out.println(\"b method invoked\");}\n\n  public static void main(String args[]){\n  OverloadingCalculation3 obj=new OverloadingCalculation3();\n  obj.sum(20,20);//now ambiguity\n  }\n}\n"], "Language": "Java", "Description": ["One type is promoted to another implicitly if no matching datatype is found. Let's understand the concept by the figure given below:", "As displayed in the above diagram, byte can be promoted to short, int, long, float or double. The short datatype can be promoted to int,long,float or double. The char datatype can be promoted to int,long,float or double and so on.", "If there are matching type arguments in the method, type promotion is not performed.", "If there are no matching type arguments in the method, and each method promotes similar number of arguments, there will be ambiguity."], "URL": "https://www.javatpoint.com/method-overloading-in-java"},
{"Title": "Method Overriding in Java", "subtitle": "Difference  between method Overloading and Method Overriding in java", "Code": [], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/method-overriding-in-java"},
{"Title": "Super Keyword in Java", "subtitle": "Usage of Java super Keyword", "Code": [], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/super-keyword"},
{"Title": "Super Keyword in Java", "subtitle": "1) super is used to refer immediate parent class instance variable.", "Code": ["\nclass Animal{\nString color=\"white\";\n}\nclass Dog extends Animal{\nString color=\"black\";\nvoid printColor(){\nSystem.out.println(color);//prints color of Dog class\nSystem.out.println(super.color);//prints color of Animal class\n}\n}\nclass TestSuper1{\npublic static void main(String args[]){\nDog d=new Dog();\nd.printColor();\n}}\n"], "Language": "Java", "Description": ["We can use super keyword to access the data member or field of parent class. It is used if parent class and child class have same fields.", "Output:", "In the above example, Animal and Dog both classes have a common property color. If we print color property, it will print the color of current class by default. To access the parent property, we need to use super keyword. "], "URL": "https://www.javatpoint.com/super-keyword"},
{"Title": "Super Keyword in Java", "subtitle": "2) super can be used to invoke parent class method", "Code": ["\nclass Animal{\nvoid eat(){System.out.println(\"eating...\");}\n}\nclass Dog extends Animal{\nvoid eat(){System.out.println(\"eating bread...\");}\nvoid bark(){System.out.println(\"barking...\");}\nvoid work(){\nsuper.eat();\nbark();\n}\n}\nclass TestSuper2{\npublic static void main(String args[]){\nDog d=new Dog();\nd.work();\n}}\n"], "Language": "Java", "Description": ["The super keyword can also be used to invoke parent class method. It should be used if subclass contains the same  method as parent class. In other words, it is used if method is overridden.", "Output:", "In the above example Animal and Dog both classes have eat() method if we call eat() method from Dog class, it will call the eat() method of Dog class by default because priority is given to local. ", "To call the parent class method, we need to use super keyword."], "URL": "https://www.javatpoint.com/super-keyword"},
{"Title": "Super Keyword in Java", "subtitle": "3) super is used to invoke parent class constructor.", "Code": ["\nclass Animal{\nAnimal(){System.out.println(\"animal is created\");}\n}\nclass Dog extends Animal{\nDog(){\nsuper();\nSystem.out.println(\"dog is created\");\n}\n}\nclass TestSuper3{\npublic static void main(String args[]){\nDog d=new Dog();\n}}\n", "\nclass Animal{\nAnimal(){System.out.println(\"animal is created\");}\n}\nclass Dog extends Animal{\nDog(){\nSystem.out.println(\"dog is created\");\n}\n}\nclass TestSuper4{\npublic static void main(String args[]){\nDog d=new Dog();\n}}\n"], "Language": "Java", "Description": ["The super keyword can also be used to invoke the parent class constructor. Let's see a simple example:", "Output:", "As we know well that default constructor is provided by compiler automatically if there is no constructor. But, it also adds super() as the first statement.", "Output:"], "URL": "https://www.javatpoint.com/super-keyword"},
{"Title": "Super Keyword in Java", "subtitle": "super example: real use", "Code": ["\nclass Person{\nint id;\nString name;\nPerson(int id,String name){\nthis.id=id;\nthis.name=name;\n}\n}\nclass Emp extends Person{\nfloat salary;\nEmp(int id,String name,float salary){\nsuper(id,name);//reusing parent constructor\nthis.salary=salary;\n}\nvoid display(){System.out.println(id+\" \"+name+\" \"+salary);}\n}\nclass TestSuper5{\npublic static void main(String[] args){\nEmp e1=new Emp(1,\"ankit\",45000f);\ne1.display();\n}}\n"], "Language": "Java", "Description": ["Let's see the real use of super keyword. Here, Emp class inherits Person class so all the properties of Person will be inherited to Emp by default. To initialize all the property, we are using parent class constructor from child class. In such way, we are reusing the parent class constructor. ", "Output:"], "URL": "https://www.javatpoint.com/super-keyword"},
{"Title": "Instance initializer block", "subtitle": "Why use instance initializer block?", "Code": ["\nclass Bike7{\n    int speed;\n    \n    Bike7(){System.out.println(\"speed is \"+speed);}\n \n    {speed=100;}\n     \n    public static void main(String args[]){\n    Bike7 b1=new Bike7();\n    Bike7 b2=new Bike7();\n    }    \n}\n"], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/instance-initializer-block"},
{"Title": "Instance initializer block", "subtitle": "What is invoked first, instance initializer block or constructor?", "Code": ["\nclass Bike8{\n    int speed;\n    \n    Bike8(){System.out.println(\"constructor is invoked\");}\n \n    {System.out.println(\"instance initializer block invoked\");}\n     \n    public static void main(String args[]){\n    Bike8 b1=new Bike8();\n    Bike8 b2=new Bike8();\n    }    \n}\n"], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/instance-initializer-block"},
{"Title": "Instance initializer block", "subtitle": "Rules for instance initializer block :", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/instance-initializer-block"},
{"Title": "Instance initializer block", "subtitle": "Program of instance initializer block that is invoked after super()", "Code": ["\nclass A{\nA(){\nSystem.out.println(\"parent class constructor invoked\");\n}\n}\nclass B2 extends A{\nB2(){\nsuper();\nSystem.out.println(\"child class constructor invoked\");\n}\n\n{System.out.println(\"instance initializer block is invoked\");}\n\npublic static void main(String args[]){\nB2 b=new B2();\n}\n}\n"], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/instance-initializer-block"},
{"Title": "Instance initializer block", "subtitle": "Another example of instance block", "Code": ["\nclass A{\nA(){\nSystem.out.println(\"parent class constructor invoked\");\n}\n}\n\nclass B3 extends A{\nB3(){\nsuper();\nSystem.out.println(\"child class constructor invoked\");\n}\n\nB3(int a){\nsuper();\nSystem.out.println(\"child class constructor invoked \"+a);\n}\n\n{System.out.println(\"instance initializer block is invoked\");}\n\npublic static void main(String args[]){\nB3 b1=new B3();\nB3 b2=new B3(10);\n}\n}\n"], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/instance-initializer-block"},
{"Title": "Final Keyword In Java", "subtitle": "1) Java final variable", "Code": ["\n class Bike9{\n  final int speedlimit=90;//final variable\n  void run(){\n   speedlimit=400;\n  }\n  public static void main(String args[]){\n  Bike9 obj=new  Bike9();\n  obj.run();\n  }\n }//end of class\n\n"], "Language": "Java", "Description": ["If you make any variable as final, you cannot change the value of final variable(It will be constant).", "There is a final variable speedlimit, we are going to change the value of this variable, but It can't be changed because final variable once assigned a value can never be changed. ", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/final-keyword"},
{"Title": "Final Keyword In Java", "subtitle": "2) Java final method", "Code": ["\nclass Bike{\n  final void run(){System.out.println(\"running\");}\n}\n   \nclass Honda extends Bike{\n   void run(){System.out.println(\"running safely with 100kmph\");}\n   \n   public static void main(String args[]){\n   Honda honda= new Honda();\n   honda.run();\n   }\n}\n"], "Language": "Java", "Description": ["If you make any method as final, you cannot override it."], "URL": "https://www.javatpoint.com/final-keyword"},
{"Title": "Final Keyword In Java", "subtitle": "3) Java final class", "Code": ["\n final class Bike{}\n \n class Honda1 extends Bike{\n   void run(){System.out.println(\"running safely with 100kmph\");}\n   \n   public static void main(String args[]){\n   Honda1 honda= new Honda1();\n   honda.run();\n   }\n }\n", "\nclass Bike{\n  final void run(){System.out.println(\"running...\");}\n}\nclass Honda2 extends Bike{\n   public static void main(String args[]){\n    new Honda2().run();\n   }\n}\n", "\nclass Student{\nint id;\nString name;\nfinal String PAN_CARD_NUMBER;\n...\n}\n\n", "\nclass Bike10{\n  final int speedlimit;//blank final variable\n  \n  Bike10(){\n  speedlimit=70;\n  System.out.println(speedlimit);\n  }\n\n  public static void main(String args[]){\n    new Bike10();\n }\n}\n", "\nclass A{\n  static final int data;//static blank final variable\n  static{ data=50;}\n  public static void main(String args[]){\n    System.out.println(A.data);\n }\n}\n", "\nclass Bike11{\n  int cube(final int n){\n   n=n+2;//can't be changed as n is final\n   n*n*n;\n  }\n  public static void main(String args[]){\n    Bike11 b=new Bike11();\n    b.cube(5);\n }\n}\n"], "Language": "Java", "Description": ["If you make any class as final, you cannot extend it.", "Ans) Yes, final method is inherited but you cannot override it. For Example:\n", "\nA final variable that is not initialized at the time of declaration is known as blank final variable.", " If you want to create a variable that is initialized at the time of creating object and once initialized may not be changed, it is useful. For example PAN CARD number of an employee. ", "It can be initialized only in constructor.", "Yes, but only in constructor. For example:", "A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.", "If you declare any parameter as final, you cannot change the value of it.", "No, because constructor is never inherited."], "URL": "https://www.javatpoint.com/final-keyword"},
{"Title": "Polymorphism in Java", "subtitle": "Runtime Polymorphism in Java", "Code": ["\nclass A{}\nclass B extends A{}\n", "\nA a=new B();//upcasting\n", "\ninterface I{}\nclass A{}\nclass B extends A implements I{}\n", "\n class Bike{\n   void run(){System.out.println(\"running\");}\n }\n class Splendor extends Bike{\n   void run(){System.out.println(\"running safely with 60km\");}\n \n   public static void main(String args[]){\n     Bike b = new Splendor();//upcasting\n     b.run();\n   }\n }\n"], "Language": "Java", "Description": [" or ", " is a process in which a call to an overridden method is resolved at runtime rather than compile-time.\n", "\nIn this process, an overridden method is called through the reference variable of a superclass. The determination of the method to be called is based on the object being referred to by the reference variable.\n", "Let's first understand the upcasting before Runtime Polymorphism.", "If the reference variable of Parent class refers to the object of Child class, it is known as upcasting. For example:", "For upcasting, we can use the reference variable of class type or an interface type. For Example:", "Here, the relationship of B class would be:", "Since Object is the root class of all classes in Java, so we can write B IS-A Object.", "In this example, we are creating two classes Bike and Splendor. Splendor class extends Bike class and overrides its run() method. We are calling the run method by the reference variable of Parent class. Since it refers to the subclass object and subclass method overrides the Parent class method, the subclass method is invoked at runtime.\n", "\n Since method invocation is determined by the JVM not compiler, it is known as runtime polymorphism.\n", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/runtime-polymorphism-in-java"},
{"Title": "Polymorphism in Java", "subtitle": "Java Runtime Polymorphism Example: Bank", "Code": ["\nclass Bank{\nfloat getRateOfInterest(){return 0;}\n}\nclass SBI extends Bank{\nfloat getRateOfInterest(){return 8.4f;}\n}\nclass ICICI extends Bank{\nfloat getRateOfInterest(){return 7.3f;}\n}\nclass AXIS extends Bank{\nfloat getRateOfInterest(){return 9.7f;}\n}\nclass TestPolymorphism{\npublic static void main(String args[]){\nBank b;\nb=new SBI();\nSystem.out.println(\"SBI Rate of Interest: \"+b.getRateOfInterest());\nb=new ICICI();\nSystem.out.println(\"ICICI Rate of Interest: \"+b.getRateOfInterest());\nb=new AXIS();\nSystem.out.println(\"AXIS Rate of Interest: \"+b.getRateOfInterest());\n}\n}\n"], "Language": "Java", "Description": ["Consider a scenario where Bank is a class that provides a method to get the rate of interest. However, the rate of interest may differ according to banks. For example, SBI, ICICI, and AXIS banks are providing 8.4%, 7.3%, and 9.7% rate of interest.", "Output:"], "URL": "https://www.javatpoint.com/runtime-polymorphism-in-java"},
{"Title": "Polymorphism in Java", "subtitle": "Java Runtime Polymorphism Example: Shape", "Code": ["\nclass Shape{\nvoid draw(){System.out.println(\"drawing...\");}\n}\nclass Rectangle extends Shape{\nvoid draw(){System.out.println(\"drawing rectangle...\");}\n}\nclass Circle extends Shape{\nvoid draw(){System.out.println(\"drawing circle...\");}\n}\nclass Triangle extends Shape{\nvoid draw(){System.out.println(\"drawing triangle...\");}\n}\nclass TestPolymorphism2{\npublic static void main(String args[]){\nShape s;\ns=new Rectangle();\ns.draw();\ns=new Circle();\ns.draw();\ns=new Triangle();\ns.draw();\n}\n}\n"], "Language": "Java", "Description": ["Output:"], "URL": "https://www.javatpoint.com/runtime-polymorphism-in-java"},
{"Title": "Polymorphism in Java", "subtitle": "Java Runtime Polymorphism Example: Animal", "Code": ["\nclass Animal{\nvoid eat(){System.out.println(\"eating...\");}\n}\nclass Dog extends Animal{\nvoid eat(){System.out.println(\"eating bread...\");}\n}\nclass Cat extends Animal{\nvoid eat(){System.out.println(\"eating rat...\");}\n}\nclass Lion extends Animal{\nvoid eat(){System.out.println(\"eating meat...\");}\n}\nclass TestPolymorphism3{\npublic static void main(String[] args){\nAnimal a;\na=new Dog();\na.eat();\na=new Cat();\na.eat();\na=new Lion();\na.eat();\n}}\n"], "Language": "Java", "Description": ["Output:"], "URL": "https://www.javatpoint.com/runtime-polymorphism-in-java"},
{"Title": "Polymorphism in Java", "subtitle": "Java Runtime Polymorphism with Data Member", "Code": ["\n class Bike{\n  int speedlimit=90;\n }\n class Honda3 extends Bike{\n  int speedlimit=150;\n \n  public static void main(String args[]){\n   Bike obj=new Honda3();\n   System.out.println(obj.speedlimit);//90\n }\n}\n"], "Language": "Java", "Description": ["A method is overridden, not the data members, so runtime polymorphism can't be achieved by data members.\n", "\nIn the example given below, both the classes have a data member speedlimit. We are accessing the data member by the reference variable of Parent class which refers to the subclass object. Since we are accessing the data member which is not overridden, hence it will access the data member of the Parent class always.\n", "Output:"], "URL": "https://www.javatpoint.com/runtime-polymorphism-in-java"},
{"Title": "Polymorphism in Java", "subtitle": "Java Runtime Polymorphism with Multilevel Inheritance", "Code": ["\nclass Animal{\nvoid eat(){System.out.println(\"eating\");}\n}\nclass Dog extends Animal{\nvoid eat(){System.out.println(\"eating fruits\");}\n}\nclass BabyDog extends Dog{\nvoid eat(){System.out.println(\"drinking milk\");}\npublic static void main(String args[]){\nAnimal a1,a2,a3;\na1=new Animal();\na2=new Dog();\na3=new BabyDog();\na1.eat();\na2.eat();\na3.eat();\n}\n}\n", "\nclass Animal{\nvoid eat(){System.out.println(\"animal is eating...\");}\n}\nclass Dog extends Animal{\nvoid eat(){System.out.println(\"dog is eating...\");}\n}\nclass BabyDog1 extends Dog{\npublic static void main(String args[]){\nAnimal a=new BabyDog1();\na.eat();\n}}\n"], "Language": "Java", "Description": ["Let's see the simple example of Runtime Polymorphism with multilevel inheritance.", "Output:", "Output:", "Since, BabyDog is not overriding the eat() method, so eat() method of Dog class is invoked."], "URL": "https://www.javatpoint.com/runtime-polymorphism-in-java"},
{"Title": "Java instanceof", "subtitle": "Another example of java instanceof operator", "Code": ["\nclass Animal{}\nclass Dog1 extends Animal{//Dog inherits Animal\n\n public static void main(String args[]){\n Dog1 d=new Dog1();\n System.out.println(d instanceof Animal);//true\n }\n}\n"], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/downcasting-with-instanceof-operator"},
{"Title": "Java instanceof", "subtitle": "instanceof in java with a variable that have null value", "Code": ["\nclass Dog2{\n public static void main(String args[]){\n  Dog2 d=null;\n  System.out.println(d instanceof Dog2);//false\n }\n}\n"], "Language": "Java", "Description": ["If we apply instanceof operator with a variable that have null value, it returns false. Let's see the example given below where we apply instanceof operator with the variable that have null value."], "URL": "https://www.javatpoint.com/downcasting-with-instanceof-operator"},
{"Title": "Java instanceof", "subtitle": "Downcasting with java instanceof operator", "Code": ["\nDog d=new Animal();//Compilation error\n", "\nDog d=(Dog)new Animal();\n//Compiles successfully but ClassCastException is thrown at runtime\n", "\nclass Animal { }\n\nclass Dog3 extends Animal {\n  static void method(Animal a) {\n    if(a instanceof Dog3){\n       Dog3 d=(Dog3)a;//downcasting\n       System.out.println(\"ok downcasting performed\");\n    }\n  }\n \n  public static void main (String [] args) {\n    Animal a=new Dog3();\n    Dog3.method(a);\n  }\n  \n }\n", "\nclass Animal { }\nclass Dog4 extends Animal {\n  static void method(Animal a) {\n       Dog4 d=(Dog4)a;//downcasting\n       System.out.println(\"ok downcasting performed\");\n  }\n   public static void main (String [] args) {\n    Animal a=new Dog4();\n    Dog4.method(a);\n  }\n}\n", "\nAnimal a=new Animal();\nDog.method(a);\n//Now ClassCastException but not in case of instanceof operator\n", "\ninterface Printable{}\nclass A implements Printable{\npublic void a(){System.out.println(\"a method\");}\n}\nclass B implements Printable{\npublic void b(){System.out.println(\"b method\");}\n}\n\nclass Call{\nvoid invoke(Printable p){//upcasting\nif(p instanceof A){\nA a=(A)p;//Downcasting \na.a();\n}\nif(p instanceof B){\nB b=(B)p;//Downcasting \nb.b();\n}\n\n}\n}//end of Call class\n\nclass Test4{\npublic static void main(String args[]){\nPrintable p=new B();\nCall c=new Call();\nc.invoke(p);\n}\n}\n"], "Language": "Java", "Description": ["When Subclass type refers to the object of Parent class, it is known as downcasting. If we perform it directly, compiler gives Compilation error. If you perform it by typecasting, ClassCastException is thrown at runtime. But if we use instanceof operator, downcasting is possible.", "If we perform downcasting by typecasting, ClassCastException is thrown at runtime.", "Let's see the example, where downcasting is possible by instanceof operator.", "Downcasting can also be performed without the use of instanceof operator as displayed in the following example:", "Let's take closer look at this, actual object that is referred by a, is an object of Dog class. So if we downcast it, it is fine. But what will happen if we write:", "Let's see the real use of instanceof  keyword by the example given below."], "URL": "https://www.javatpoint.com/downcasting-with-instanceof-operator"},
{"Title": "Interface in Java", "subtitle": "Why use Java interface?", "Code": [], "Language": "Java", "Description": ["There are mainly three reasons to use interface. They are given below.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "How to declare an interface?", "Code": ["\ninterface "], "Language": "Java", "Description": ["An interface is declared by using the interface keyword. It provides total abstraction; means all the methods in an interface are declared with the empty body, and all the fields are public, static and final by default. A class that implements an interface must implement all the methods declared in the interface."], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Java 8 Interface Improvement", "Code": [], "Language": "Java", "Description": ["Since Java 8, interface can have default and static methods which is discussed later."], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Internal addition by the compiler", "Code": [], "Language": "Java", "Description": ["In other words, Interface fields are public, static and final by default, and the methods are public and abstract.", "As shown in the figure given below, a class extends another class, an interface extends another interface, but a ", "."], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Java Interface Example", "Code": ["\ninterface printable{\nvoid print();\n}\nclass A6 implements printable{\npublic void print(){System.out.println(\"Hello\");}\n\npublic static void main(String args[]){\nA6 obj = new A6();\nobj.print();\n }\n}\n"], "Language": "Java", "Description": ["In this example, the Printable interface has only one method, and its implementation is provided in the A6 class.", "Output:"], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Java Interface Example: Drawable", "Code": ["\n//Interface declaration: by first user\ninterface Drawable{\nvoid draw();\n}\n//Implementation: by second user\nclass Rectangle implements Drawable{\npublic void draw(){System.out.println(\"drawing rectangle\");}\n}\nclass Circle implements Drawable{\npublic void draw(){System.out.println(\"drawing circle\");}\n}\n//Using interface: by third user\nclass TestInterface1{\npublic static void main(String args[]){\nDrawable d=new Circle();//In real scenario, object is provided by method e.g. getDrawable()\nd.draw();\n}}\n"], "Language": "Java", "Description": ["In this example, the Drawable interface has only one method. Its implementation is provided by Rectangle and Circle classes. In a real scenario, an interface is defined by someone else, but its implementation is provided by different implementation providers. Moreover, it is used by someone else. The implementation part is hidden by the user who uses the interface.", "File: TestInterface1.java", "Output:"], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Java Interface Example: Bank", "Code": ["\ninterface Bank{\nfloat rateOfInterest();\n}\nclass SBI implements Bank{\npublic float rateOfInterest(){return 9.15f;}\n}\nclass PNB implements Bank{\npublic float rateOfInterest(){return 9.7f;}\n}\nclass TestInterface2{\npublic static void main(String[] args){\nBank b=new SBI();\nSystem.out.println(\"ROI: \"+b.rateOfInterest());\n}}\n"], "Language": "Java", "Description": ["Let's see another example of java interface which provides the implementation of Bank interface.", "File: TestInterface2.java", "Output:"], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Multiple inheritance in Java by interface", "Code": ["\ninterface Printable{\nvoid print();\n}\ninterface Showable{\nvoid show();\n}\nclass A7 implements Printable,Showable{\npublic void print(){System.out.println(\"Hello\");}\npublic void show(){System.out.println(\"Welcome\");}\n\npublic static void main(String args[]){\nA7 obj = new A7();\nobj.print();\nobj.show();\n }\n}\n"], "Language": "Java", "Description": ["If a class implements multiple interfaces, or an interface extends multiple interfaces, it is known as multiple inheritance."], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Q) Multiple inheritance is not supported through class in java, but it is possible by an interface, why?", "Code": ["\ninterface Printable{\nvoid print();\n}\ninterface Showable{\nvoid print();\n}\n\nclass TestInterface3 implements Printable, Showable{\npublic void print(){System.out.println(\"Hello\");}\npublic static void main(String args[]){\nTestInterface3 obj = new TestInterface3();\nobj.print();\n }\n}\n"], "Language": "Java", "Description": ["As we have explained in the inheritance chapter, multiple inheritance is not supported in the case of class because of ambiguity. However, it is supported in case of an interface because there is no ambiguity. It is because its implementation is provided by the implementation class. For example:", "Output:", "As you can see in the above example, Printable and Showable interface have same methods but its implementation is provided by class TestTnterface1, so there is no ambiguity."], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Interface inheritance", "Code": ["\ninterface Printable{\nvoid print();\n}\ninterface Showable extends Printable{\nvoid show();\n}\nclass TestInterface4 implements Showable{\npublic void print(){System.out.println(\"Hello\");}\npublic void show(){System.out.println(\"Welcome\");}\n\npublic static void main(String args[]){\nTestInterface4 obj = new TestInterface4();\nobj.print();\nobj.show();\n }\n}\n"], "Language": "Java", "Description": ["A class implements an interface, but one interface extends another interface.", "Output:"], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Java 8 Default Method in Interface", "Code": ["\ninterface Drawable{\nvoid draw();\ndefault void msg(){System.out.println(\"default method\");}\n}\nclass Rectangle implements Drawable{\npublic void draw(){System.out.println(\"drawing rectangle\");}\n}\nclass TestInterfaceDefault{\npublic static void main(String args[]){\nDrawable d=new Rectangle();\nd.draw();\nd.msg();\n}}\n"], "Language": "Java", "Description": ["Since Java 8, we can have method body in interface. But we need to make it default method. Let's see an example:", "File: TestInterfaceDefault.java", "Output:"], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Java 8 Static Method in Interface", "Code": ["\ninterface Drawable{\nvoid draw();\nstatic int cube(int x){return x*x*x;}\n}\nclass Rectangle implements Drawable{\npublic void draw(){System.out.println(\"drawing rectangle\");}\n}\n\nclass TestInterfaceStatic{\npublic static void main(String args[]){\nDrawable d=new Rectangle();\nd.draw();\nSystem.out.println(Drawable.cube(3));\n}}\n"], "Language": "Java", "Description": ["Since Java 8, we can have static method in interface. Let's see an example:", "File: TestInterfaceStatic.java", "Output:"], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Interface in Java", "subtitle": "Q) What is marker or tagged interface?", "Code": ["\n//How Serializable interface is written?\npublic interface Serializable{\n}\n", "\ninterface printable{\n void print();\n interface MessagePrintable{\n   void msg();\n }\n}\n"], "Language": "Java", "Description": ["An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc. They are used to provide some essential information to the JVM so that JVM may perform some useful operation.", "Note: An interface can have another interface which is known as a nested interface. We will learn it in detail in the nested classes chapter. For example:"], "URL": "https://www.javatpoint.com/interface-in-java"},
{"Title": "Java Package", "subtitle": "Advantage of Java Package", "Code": [], "Language": "Java", "Description": ["1) Java package is used to categorize the classes and interfaces so that they can be easily maintained.", "2) Java package provides access protection.", "3) Java package removes naming collision.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "Simple example of java package", "Code": ["\n//save as Simple.java\npackage mypack;\npublic class Simple{\n public static void main(String args[]){\n    System.out.println(\"Welcome to package\");\n   }\n}\n"], "Language": "Java", "Description": ["The ", " is used to create a package in java."], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "How to compile java package", "Code": ["\njavac -d directory javafilename\n", "\njavac -d . Simple.java\n"], "Language": "Java", "Description": ["If you are not using any IDE, you need to follow the ", " given below:", "For ", "The -d switch specifies the destination where to put the generated class file. You can use any directory name like /home (in case of Linux), d:/abc (in case of windows) etc. \nIf you want to keep the package within the same directory, you can use . (dot).\n"], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "How to run java package program", "Code": [], "Language": "Java", "Description": ["You need to use fully qualified name e.g. mypack.Simple etc to run the class.\n"], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "How to access package from another package?", "Code": [], "Language": "Java", "Description": ["There are three ways to access the package from outside the package.", "If you use package.* then all the classes and interfaces of this package will be accessible but not subpackages.\n", "The import keyword is used to make the classes and interface of another package accessible to the current package."], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "Example of package that import the packagename.*", "Code": ["\n//save by A.java\npackage pack;\npublic class A{\n  public void msg(){System.out.println(\"Hello\");}\n}\n", "\n//save by B.java\npackage mypack;\nimport pack.*;\n\nclass B{\n  public static void main(String args[]){\n   A obj = new A();\n   obj.msg();\n  }\n}\n"], "Language": "Java", "Description": ["If you import package.classname then only declared class of this package will be accessible."], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "Example of package by import package.classname", "Code": ["\n//save by A.java\n\npackage pack;\npublic class A{\n  public void msg(){System.out.println(\"Hello\");}\n}\n", "\n//save by B.java\npackage mypack;\nimport pack.A;\n\nclass B{\n  public static void main(String args[]){\n   A obj = new A();\n   obj.msg();\n  }\n}\n"], "Language": "Java", "Description": ["If you use fully qualified name then only declared class of this package will be accessible. Now there is no need to import. But you need to use fully qualified name every time when you are accessing the class or interface.", "It is generally used when two packages have same class name e.g. java.util and java.sql packages contain Date class."], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "Example of package by import fully qualified name", "Code": ["\n//save by A.java\npackage pack;\npublic class A{\n  public void msg(){System.out.println(\"Hello\");}\n}\n", "\n//save by B.java\npackage mypack;\nclass B{\n  public static void main(String args[]){\n   pack.A obj = new pack.A();//using fully qualified name\n   obj.msg();\n  }\n}\n"], "Language": "Java", "Description": ["If you import a package, all the classes and interface of that package will be imported excluding the classes and interfaces of the subpackages. Hence, you need to import the subpackage as well."], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "Subpackage in java", "Code": ["\npackage com.javatpoint.core;\nclass Simple{\n  public static void main(String args[]){\n   System.out.println(\"Hello subpackage\");\n  }\n}\n"], "Language": "Java", "Description": ["Package inside the package is called the ", ". It should be created ", ".", " Let's take an example, Sun Microsystem has definded a package named java that contains many classes like System, String, Reader, Writer, Socket etc. These classes represent a particular group e.g. Reader and Writer classes are for Input/Output operation, Socket and ServerSocket classes are for networking etc and so on. So, Sun has subcategorized the java package into subpackages such as lang, net, io etc. and put the Input/Output related classes in io package, Server and ServerSocket classes in net packages and so on."], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Package", "subtitle": "How to send the class file to another directory or drive?", "Code": ["\n//save as Simple.java\npackage mypack;\npublic class Simple{\n public static void main(String args[]){\n    System.out.println(\"Welcome to package\");\n   }\n}\n", "\n//save as C.java otherwise Compilte Time Error\n\nclass A{}\nclass B{}\npublic class C{}\n\n", "\n//save as A.java\n\npackage javatpoint;\npublic class A{}\n\n", "\n//save as B.java\n\npackage javatpoint;\npublic class B{}\n\n"], "Language": "Java", "Description": ["There is a scenario, I want to put the class file of A.java source file in classes folder of c: drive. For example:", "The -classpath switch can be used with javac and java tool.", "To run this program from e:\\source directory, you can use -classpath switch of java that tells where to look for class file. For example:"], "URL": "https://www.javatpoint.com/package"},
{"Title": "Java Math class", "subtitle": "Example 1", "Code": ["\npublic class JavaMathExample1  \n{  \n    public static void main(String[] args)   \n    {  \n        double x = 28;  \n        double y = 4;  \n        \n        // return the maximum of two numbers\n        System.out.println(\"Maximum number of x and y is: \" +Math.max(x, y)); \n        \n        // return the square root of y \n        System.out.println(\"Square root of y is: \" + Math.sqrt(y)); \n        \n        //returns 28 power of 4 i.e. 28*28*28*28  \n        System.out.println(\"Power of x and y is: \" + Math.pow(x, y));    \n\n        // return the logarithm of given value     \n        System.out.println(\"Logarithm of x is: \" + Math.log(x)); \n        System.out.println(\"Logarithm of y is: \" + Math.log(y));\n        \n        // return the logarithm of given value when base is 10    \n        System.out.println(\"log10 of x is: \" + Math.log10(x)); \n        System.out.println(\"log10 of y is: \" + Math.log10(y));  \n        \n        // return the log of x + 1\n        System.out.println(\"log1p of x is: \" +Math.log1p(x));  \n\n        // return a power of 2  \n        System.out.println(\"exp of a is: \" +Math.exp(x));  \n        \n        // return (a power of 2)-1\n        System.out.println(\"expm1 of a is: \" +Math.expm1(x));\n    }  \n}  \n"], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-math"},
{"Title": "Java Math class", "subtitle": "Example 2", "Code": ["\npublic class JavaMathExample2  \n{  \n    public static void main(String[] args)   \n    {  \n        double a = 30;  \n        \n        // converting values to radian  \n        double b = Math.toRadians(a); \n        \n        // return the trigonometric sine of a    \n        System.out.println(\"Sine value of a is: \" +Math.sin(a));  \n        \n        // return the trigonometric cosine value of a\n        System.out.println(\"Cosine value of a is: \" +Math.cos(a));\n        \n        // return the trigonometric tangent value of a\n        System.out.println(\"Tangent value of a is: \" +Math.tan(a));\n        \n        // return the trigonometric arc sine of a    \n        System.out.println(\"Sine value of a is: \" +Math.asin(a));  \n        \n        // return the trigonometric arc cosine value of a\n        System.out.println(\"Cosine value of a is: \" +Math.acos(a));\n        \n        // return the trigonometric arc tangent value of a\n        System.out.println(\"Tangent value of a is: \" +Math.atan(a));\n\n        // return the hyperbolic sine of a    \n        System.out.println(\"Sine value of a is: \" +Math.sinh(a));  \n        \n        // return the hyperbolic cosine value of a\n        System.out.println(\"Cosine value of a is: \" +Math.cosh(a));\n        \n        // return the hyperbolic tangent value of a\n        System.out.println(\"Tangent value of a is: \" +Math.tanh(a));\n    }  \n}  \n"], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-math"},
{"Title": "Java Math class", "subtitle": "Java Math Methods", "Code": [], "Language": "Java", "Description": ["The ", " class contains various methods for performing basic numeric operations such as the logarithm, cube root, and trigonometric functions etc. The various java math methods are as follows:"], "URL": "https://www.javatpoint.com/java-math"},
{"Title": "Java Math class", "subtitle": "Basic Math methods", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-math"},
{"Title": "Java Math class", "subtitle": "Logarithmic Math Methods ", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-math"},
{"Title": "Java Math class", "subtitle": "Trigonometric Math Methods ", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-math"},
{"Title": "Java Math class", "subtitle": "Hyperbolic Math Methods", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-math"},
{"Title": "Java Math class", "subtitle": "Angular Math Methods", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/java-math"},
{"Title": "Wrapper class in Java", "subtitle": "Wrapper class Example: Primitive to Wrapper", "Code": ["\npublic class WrapperExample1{\npublic static void main(String args[]){\n//Converting int into Integer\nint a=20;\nInteger i=Integer.valueOf(a);//converting int into Integer\nInteger j=a;//autoboxing, now compiler will write Integer.valueOf(a) internally\n\nSystem.out.println(a+\" \"+i+\" \"+j);\n}}\n"], "Language": "Java", "Description": ["Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/wrapper-class-in-java"},
{"Title": "Wrapper class in Java", "subtitle": "Wrapper class Example: Wrapper to Primitive", "Code": ["\npublic class WrapperExample2{  \npublic static void main(String args[]){  \n//Converting Integer to int  \nInteger a=new Integer(3);  \nint i=a.intValue();//converting Integer to int\nint j=a;//unboxing, now compiler will write a.intValue() internally  \n  \nSystem.out.println(a+\" \"+i+\" \"+j);  \n}}  \n"], "Language": "Java", "Description": ["Output:"], "URL": "https://www.javatpoint.com/wrapper-class-in-java"},
{"Title": "Difference between method overloading and method overriding in java", "subtitle": "Java Method Overloading example", "Code": ["\nclass OverloadingExample{\nstatic int add(int a,int b){return a+b;}\nstatic int add(int a,int b,int c){return a+b+c;}\n}\n"], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/method-overloading-vs-method-overriding-in-java"},
{"Title": "Difference between method overloading and method overriding in java", "subtitle": "Java Method Overriding example", "Code": ["\nclass Animal{\nvoid eat(){System.out.println(\"eating...\");}\n}\nclass Dog extends Animal{\nvoid eat(){System.out.println(\"eating bread...\");}\n}\n"], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/method-overloading-vs-method-overriding-in-java"},
{"Title": "Java String", "subtitle": "CharSequence Interface", "Code": ["\nString s=\"welcome\";\n", "\nString s1=\"Welcome\";\nString s2=\"Welcome\";//It doesn't create a new instance\n", "\nString s=new String(\"Welcome\");//creates two objects and one reference variable\n", "\npublic class StringExample{\npublic static void main(String args[]){\nString s1=\"java\";//creating string by java string literal\nchar ch[]={'s','t','r','i','n','g','s'};\nString s2=new String(ch);//converting char array to string\nString s3=new String(\"example\");//creating java string by new keyword\nSystem.out.println(s1);\nSystem.out.println(s2);\nSystem.out.println(s3);\n}}\n"], "Language": "Java", "Description": ["The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in java by using these three classes.", "The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes.", "We will discuss immutable string later. Let's first understand what is String in Java and how to create the String object.", "Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object.", "There are two ways to create String object:", "Java String literal is created by using double quotes. For Example:", "\nEach time you create a string literal, the JVM checks the \"string constant pool\" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example:\n", "\nIn the above example, only one object will be created. Firstly, JVM will not find any string object with the value \"Welcome\" in string constant pool, that is why it will create a new object. After that it will find the string with the value \"Welcome\" in the pool, it will not create a new object but will return the reference to the same instance.\n", "\nTo make Java more memory efficient (because no new objects are created if it exists already in the string constant pool).\n", "\nIn such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal \"Welcome\" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool).\n", "The java.lang.String class provides many useful methods to perform operations on sequence of char values.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/java-string"},
{"Title": "Java String compare", "subtitle": "1) String compare by equals() method", "Code": ["\nclass Teststringcomparison1{\n public static void main(String args[]){\n   String s1=\"Sachin\";\n   String s2=\"Sachin\";\n   String s3=new String(\"Sachin\");\n   String s4=\"Saurav\";\n   System.out.println(s1.equals(s2));//true\n   System.out.println(s1.equals(s3));//true\n   System.out.println(s1.equals(s4));//false\n }\n}\n", "\nclass Teststringcomparison2{\n public static void main(String args[]){\n   String s1=\"Sachin\";\n   String s2=\"SACHIN\";\n\n   System.out.println(s1.equals(s2));//false\n   System.out.println(s1.equalsIgnoreCase(s2));//true\n }\n}\n"], "Language": "Java", "Description": ["The String equals() method compares the original content of the string. It compares values of string for equality. String class provides two methods:\n", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/string-comparison-in-java"},
{"Title": "Java String compare", "subtitle": "2) String compare by == operator", "Code": ["\nclass Teststringcomparison3{\n public static void main(String args[]){\n   String s1=\"Sachin\";\n   String s2=\"Sachin\";\n   String s3=new String(\"Sachin\");\n   System.out.println(s1==s2);//true (because both refer to same instance)\n   System.out.println(s1==s3);//false(because s3 refers to instance created in nonpool)\n }\n}\n"], "Language": "Java", "Description": ["The = = operator compares references not values."], "URL": "https://www.javatpoint.com/string-comparison-in-java"},
{"Title": "Java String compare", "subtitle": "3) String compare by compareTo() method", "Code": ["\nclass Teststringcomparison4{\n public static void main(String args[]){\n   String s1=\"Sachin\";\n   String s2=\"Sachin\";\n   String s3=\"Ratan\";\n   System.out.println(s1.compareTo(s2));//0\n   System.out.println(s1.compareTo(s3));//1(because s1>s3)\n   System.out.println(s3.compareTo(s1));//-1(because s3 < s1 )\n }\n}\n\n"], "Language": "Java", "Description": ["The String compareTo() method compares values lexicographically and returns an integer value that describes if first string is less than, equal to or greater than second string.", "Suppose s1 and s2 are two string variables. If:"], "URL": "https://www.javatpoint.com/string-comparison-in-java"},
{"Title": "String Concatenation in Java", "subtitle": "1) String Concatenation by + (string concatenation) operator", "Code": ["\nclass TestStringConcatenation1{\n public static void main(String args[]){\n   String s=\"Sachin\"+\" Tendulkar\";\n   System.out.println(s);//Sachin Tendulkar\n }\n}\n", "\nString s=(new StringBuilder()).append(\"Sachin\").append(\" Tendulkar).toString();\n", "\nclass TestStringConcatenation2{\n public static void main(String args[]){\n   String s=50+30+\"Sachin\"+40+40;\n   System.out.println(s);//80Sachin4040\n }\n}\n", "\npublic String concat(String another)\n", "\nclass TestStringConcatenation3{\n public static void main(String args[]){\n   String s1=\"Sachin \";\n   String s2=\"Tendulkar\";\n   String s3=s1.concat(s2);\n   System.out.println(s3);//Sachin Tendulkar\n  }\n}\n"], "Language": "Java", "Description": ["Java string concatenation operator (+) is used to add strings. For Example:", "The ", " above code to this:", "In java, String concatenation is implemented through the StringBuilder (or StringBuffer) class and its append method. String concatenation operator produces a new string by appending the second operand onto the end of the first operand. The string concatenation operator can concat not only string but primitive values also. For Example:", "The String concat() method concatenates the specified string to the end of current string. Syntax:\n", "Let's see the example of String concat() method.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/string-concatenation-in-java"},
{"Title": "Substring in Java", "subtitle": "Example of java substring", "Code": ["\npublic class TestSubstring{\n public static void main(String args[]){\n   String s=\"SachinTendulkar\";\n   System.out.println(s.substring(6));//Tendulkar\n   System.out.println(s.substring(0,6));//Sachin\n }\n}\n"], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/substring"},
{"Title": "Java StringBuilder class", "subtitle": "Important Constructors of StringBuilder class", "Code": [], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/StringBuilder-class"},
{"Title": "Java StringBuilder class", "subtitle": "Important methods of StringBuilder class", "Code": [], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/StringBuilder-class"},
{"Title": "Java StringBuilder class", "subtitle": "Java StringBuilder Examples", "Code": ["\nclass StringBuilderExample{\npublic static void main(String args[]){\nStringBuilder sb=new StringBuilder(\"Hello \");\nsb.append(\"Java\");//now original string is changed\nSystem.out.println(sb);//prints Hello Java\n}\n}\n", "\nclass StringBuilderExample2{\npublic static void main(String args[]){\nStringBuilder sb=new StringBuilder(\"Hello \");\nsb.insert(1,\"Java\");//now original string is changed\nSystem.out.println(sb);//prints HJavaello\n}\n}\n", "\nclass StringBuilderExample3{\npublic static void main(String args[]){\nStringBuilder sb=new StringBuilder(\"Hello\");\nsb.replace(1,3,\"Java\");\nSystem.out.println(sb);//prints HJavalo\n}\n}\n", "\nclass StringBuilderExample4{\npublic static void main(String args[]){\nStringBuilder sb=new StringBuilder(\"Hello\");\nsb.delete(1,3);\nSystem.out.println(sb);//prints Hlo\n}\n}\n", "\nclass StringBuilderExample5{\npublic static void main(String args[]){\nStringBuilder sb=new StringBuilder(\"Hello\");\nsb.reverse();\nSystem.out.println(sb);//prints olleH\n}\n}\n", "\nclass StringBuilderExample6{\npublic static void main(String args[]){\nStringBuilder sb=new StringBuilder();\nSystem.out.println(sb.capacity());//default 16\nsb.append(\"Hello\");\nSystem.out.println(sb.capacity());//now 16\nsb.append(\"java is my favourite language\");\nSystem.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2\n}\n}\n", "\nclass StringBuilderExample7{\npublic static void main(String args[]){\nStringBuilder sb=new StringBuilder();\nSystem.out.println(sb.capacity());//default 16\nsb.append(\"Hello\");\nSystem.out.println(sb.capacity());//now 16\nsb.append(\"java is my favourite language\");\nSystem.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2\nsb.ensureCapacity(10);//now no change\nSystem.out.println(sb.capacity());//now 34\nsb.ensureCapacity(50);//now (34*2)+2\nSystem.out.println(sb.capacity());//now 70\n}\n}\n"], "Language": "Java", "Description": ["Let's see the examples of different methods of StringBuilder class.", "The StringBuilder append() method concatenates the given argument with this string.\n", "The StringBuilder insert() method inserts the given string with this string at the given position.", "The StringBuilder replace() method replaces the given string from the specified beginIndex and endIndex.", "The delete() method of StringBuilder class deletes the string from the specified beginIndex to endIndex.", "The reverse() method of StringBuilder class reverses the current string.", "The capacity() method of StringBuilder class returns the current capacity of the Builder. The default capacity of the Builder is 16. If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.\n", "The ensureCapacity() method of StringBuilder class ensures that the given capacity is the minimum to the current capacity. If it is greater than the current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.\n"], "URL": "https://www.javatpoint.com/StringBuilder-class"},
{"Title": "Difference between String and StringBuffer", "subtitle": "Performance Test of String and StringBuffer", "Code": ["\npublic class ConcatTest{\n    public static String concatWithString()    {\n        String t = \"Java\";\n        for (int i=0; i<10000; i++){\n            t = t + \"Tpoint\";\n        }\n        return t;\n    }\n    public static String concatWithStringBuffer(){\n        StringBuffer sb = new StringBuffer(\"Java\");\n        for (int i=0; i<10000; i++){\n            sb.append(\"Tpoint\");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args){\n        long startTime = System.currentTimeMillis();\n        concatWithString();\n        System.out.println(\"Time taken by Concating with String: \"+(System.currentTimeMillis()-startTime)+\"ms\");\n        startTime = System.currentTimeMillis();\n        concatWithStringBuffer();\n        System.out.println(\"Time taken by Concating with  StringBuffer: \"+(System.currentTimeMillis()-startTime)+\"ms\");\n    }\n}\n"], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/difference-between-string-and-stringbuffer"},
{"Title": "Difference between String and StringBuffer", "subtitle": "String and StringBuffer HashCode Test", "Code": ["\npublic class InstanceTest{\n    public static void main(String args[]){\n        System.out.println(\"Hashcode test of String:\");\n        String str=\"java\";\n        System.out.println(str.hashCode());\n        str=str+\"tpoint\";\n        System.out.println(str.hashCode());\n \n        System.out.println(\"Hashcode test of StringBuffer:\");\n        StringBuffer sb=new StringBuffer(\"java\");\n        System.out.println(sb.hashCode());\n        sb.append(\"tpoint\");\n        System.out.println(sb.hashCode());\n    }\n}\n"], "Language": "Java", "Description": ["As you can see in the program given below, String returns new hashcode value when you concat string but StringBuffer returns same."], "URL": "https://www.javatpoint.com/difference-between-string-and-stringbuffer"},
{"Title": "Difference between StringBuffer and StringBuilder", "subtitle": "StringBuffer Example", "Code": ["\n//Java Program to demonstrate the use of StringBuffer class.\npublic class BufferTest{\n    public static void main(String[] args){\n        StringBuffer buffer=new StringBuffer(\"hello\");\n        buffer.append(\"java\");\n        System.out.println(buffer);\n    }\n}\n"], "Language": "Java", "Description": ["JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder"},
{"Title": "Difference between StringBuffer and StringBuilder", "subtitle": "StringBuilder Example", "Code": ["\n//Java Program to demonstrate the use of StringBuilder class.\npublic class BuilderTest{\n    public static void main(String[] args){\n        StringBuilder builder=new StringBuilder(\"hello\");\n        builder.append(\"java\");\n        System.out.println(builder);\n    }\n}\n"], "Language": "Java", "Description": [], "URL": "https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder"},
{"Title": "Difference between StringBuffer and StringBuilder", "subtitle": "Performance Test of StringBuffer and StringBuilder", "Code": ["\n//Java Program to demonstrate the performance of StringBuffer and StringBuilder classes.\npublic class ConcatTest{\n    public static void main(String[] args){\n        long startTime = System.currentTimeMillis();\n        StringBuffer sb = new StringBuffer(\"Java\");\n        for (int i=0; i<10000; i++){\n            sb.append(\"Tpoint\");\n        }\n        System.out.println(\"Time taken by StringBuffer: \" + (System.currentTimeMillis() - startTime) + \"ms\");\n        startTime = System.currentTimeMillis();\n        StringBuilder sb2 = new StringBuilder(\"Java\");\n        for (int i=0; i<10000; i++){\n            sb2.append(\"Tpoint\");\n        }\n        System.out.println(\"Time taken by StringBuilder: \" + (System.currentTimeMillis() - startTime) + \"ms\");\n    }\n}\n"], "Language": "Java", "Description": ["Let's see the code to check the performance of StringBuffer and StringBuilder classes."], "URL": "https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder"},
{"Title": "Java toString() method ", "subtitle": "Advantage of Java toString() method ", "Code": ["\n\nclass Student{\n int rollno;\n String name;\n String city;\n\n Student(int rollno, String name, String city){\n this.rollno=rollno;\n this.name=name;\n this.city=city;\n }\n\n public static void main(String args[]){\n   Student s1=new Student(101,\"Raj\",\"lucknow\");\n   Student s2=new Student(102,\"Vijay\",\"ghaziabad\");\n   \n   System.out.println(s1);//compiler writes here s1.toString()\n   System.out.println(s2);//compiler writes here s2.toString()\n }\n}\n\n"], "Language": "Java", "Description": ["By overriding the toString() method of the Object class, we can return values of the object, so we don't need to write much code.", "Let's see the simple code that prints reference.", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/understanding-toString()-method"},
{"Title": "Java toString() method ", "subtitle": "Example of Java toString() method\n", "Code": ["\n\nclass Student{\n int rollno;\n String name;\n String city;\n\n Student(int rollno, String name, String city){\n this.rollno=rollno;\n this.name=name;\n this.city=city;\n }\n \n public String toString(){//overriding the toString() method\n  return rollno+\" \"+name+\" \"+city;\n }\n public static void main(String args[]){\n   Student s1=new Student(101,\"Raj\",\"lucknow\");\n   Student s2=new Student(102,\"Vijay\",\"ghaziabad\");\n   \n   System.out.println(s1);//compiler writes here s1.toString()\n   System.out.println(s2);//compiler writes here s2.toString()\n }\n}\n\n"], "Language": "Java", "Description": ["Now let's see the real example of toString() method."], "URL": "https://www.javatpoint.com/understanding-toString()-method"},
{"Title": "How to reverse String in Java", "subtitle": "1) By StringBuilder / StringBuffer", "Code": ["\npublic class StringFormatter {\npublic static String reverseString(String str){\n\tStringBuilder sb=new StringBuilder(str);\n\tsb.reverse();\n\treturn sb.toString();\n}\n}\n", "\npublic class TestStringFormatter {\npublic static void main(String[] args) {\n\tSystem.out.println(StringFormatter.reverseString(\"my name is khan\"));\n\tSystem.out.println(StringFormatter.reverseString(\"I am sonoo jaiswal\"));\t\n\t}\n}\n"], "Language": "Java", "Description": ["File: StringFormatter.java", "File: TestStringFormatter.java", "Output:", "JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. ", "JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. ", "Duration: 1 week to 2 week"], "URL": "https://www.javatpoint.com/how-to-reverse-string-in-java"},
{"Title": "How to reverse String in Java", "subtitle": "2) By Reverse Iteration", "Code": ["\npublic class StringFormatter {\npublic static String reverseString(String str){\n\tchar ch[]=str.toCharArray();\n\tString rev=\"\";\n\tfor(int i=ch.length-1;i>=0;i--){\n\t\trev+=ch[i];\n\t}\n\treturn rev;\n}\n}\n", "\npublic class TestStringFormatter {\npublic static void main(String[] args) {\n\tSystem.out.println(StringFormatter.reverseString(\"my name is khan\"));\n\tSystem.out.println(StringFormatter.reverseString(\"I am sonoo jaiswal\"));\t\n\t}\n}\n"], "Language": "Java", "Description": ["File: StringFormatter.java", "File: TestStringFormatter.java", "Output:"], "URL": "https://www.javatpoint.com/how-to-reverse-string-in-java"}
]